name: Test Minimal Deployment

on:
  workflow_dispatch:

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  BACKEND_SERVICE: realm-rivalry-backend
  BACKEND_IMAGE: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  test-minimal:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    - name: Create ultra-minimal Dockerfile
      run: |
        cat > Dockerfile.test << 'EOF'
        FROM node:20-alpine
        
        RUN apk add --no-cache dumb-init
        RUN addgroup -g 1001 -S nodejs && adduser -S backend -u 1001
        
        WORKDIR /app
        RUN npm init -y && npm install express
        
        COPY test-server.js .
        
        USER backend
        EXPOSE 8080
        ENTRYPOINT ["dumb-init", "--"]
        CMD ["node", "test-server.js"]
        EOF

    - name: Create ultra-minimal server
      run: |
        cat > test-server.js << 'EOF'
        const express = require('express');
        const app = express();
        const port = process.env.PORT || 8080;
        
        app.get('/health', (req, res) => {
          res.json({ 
            status: 'healthy', 
            timestamp: new Date().toISOString(),
            version: 'test-minimal'
          });
        });
        
        app.listen(port, '0.0.0.0', () => {
          console.log('Test server listening on port', port);
        });
        EOF

    - name: Build test image
      run: |
        echo "Building test image..."
        docker build -f Dockerfile.test -t ${{ env.BACKEND_IMAGE }}:test .

    - name: Push test image
      run: |
        docker push ${{ env.BACKEND_IMAGE }}:test

    - name: Deploy test backend
      run: |
        echo "Deploying test backend..."
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image ${{ env.BACKEND_IMAGE }}:test \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 512Mi \
          --cpu 1 \
          --concurrency 10 \
          --max-instances 2 \
          --port 8080 \
          --timeout 30s

    - name: Test deployment
      run: |
        echo "Getting backend URL..."
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Backend URL: $BACKEND_URL"
        
        echo "Testing health endpoint..."
        curl -f "$BACKEND_URL/health"
        echo "âœ… Test deployment successful!"