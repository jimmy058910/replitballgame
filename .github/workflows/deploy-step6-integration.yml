name: Deploy Step 6 - Frontend Integration with Real-Time Features

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: 'false'
        type: boolean
  push:
    branches: [ main ]
    paths:
      - 'server-step6-integrated.js'
      - 'Dockerfile.step6-integration'
      - '.github/workflows/deploy-step6-integration.yml'

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-central1
  SERVICE_NAME: realm-rivalry-integrated
  REPOSITORY: realm-rivalry
  IMAGE_NAME: us-central1-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/integrated

jobs:
  deploy-integration:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          echo "üèóÔ∏è Building Step 6 Frontend Integration Docker image..."
          docker build -f Dockerfile.step6-integration -t ${{ env.IMAGE_NAME }}:latest .
          echo "üì§ Pushing Step 6 image to registry..."
          docker push ${{ env.IMAGE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying Step 6 Frontend Integration to Cloud Run..."
          
          # Base64 encode the service account key to avoid JSON parsing issues
          SERVICE_ACCOUNT_BASE64=$(echo '${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}' | base64 -w 0)
          
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.IMAGE_NAME }}:latest \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="NODE_ENV=production" \
            --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars="GOOGLE_SERVICE_ACCOUNT_KEY_BASE64=${SERVICE_ACCOUNT_BASE64}" \
            --memory 2Gi \
            --cpu 2 \
            --min-instances 1 \
            --max-instances 5 \
            --timeout 120 \
            --concurrency 200 \
            --execution-environment gen2

      - name: Verify Step 6 Deployment
        run: |
          echo "üîç Verifying Step 6 Frontend Integration deployment..."
          
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          echo "üöÄ Step 6 Frontend Integration deployed to: $SERVICE_URL"
          
          # Wait for service to be ready
          echo "‚è≥ Waiting for service to be fully ready..."
          sleep 30
          
          # Enhanced health check with proper headers
          echo "üè• Testing health endpoint..."
          curl -X GET "${SERVICE_URL}/health" \
            -H "Accept: application/json" \
            -H "User-Agent: GitHub-Actions-Health-Check" \
            --retry 3 \
            --retry-delay 10 \
            --retry-connrefused \
            --max-time 30 \
            -v || (echo "‚ùå Health check failed" && exit 1)
          
          # Test WebSocket endpoint availability
          echo "üîå Testing WebSocket endpoint availability..."
          curl -X GET "${SERVICE_URL}/socket.io/" \
            -H "Accept: */*" \
            -H "User-Agent: GitHub-Actions-WebSocket-Test" \
            --retry 3 \
            --retry-delay 5 \
            --max-time 20 \
            -v || (echo "‚ö†Ô∏è WebSocket endpoint test failed" && exit 1)
          
          # Test frontend serving (production mode)
          echo "üåê Testing frontend serving..."
          curl -X GET "${SERVICE_URL}/" \
            -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
            -H "User-Agent: Mozilla/5.0 (GitHub Actions)" \
            --retry 3 \
            --retry-delay 5 \
            --max-time 30 \
            -v || (echo "‚ö†Ô∏è Frontend serving test failed" && exit 1)

      - name: Step 6 Success Summary
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')
          
          echo ""
          echo "üéâ STEP 6 DEPLOYMENT SUCCESSFUL!"
          echo "================================="
          echo ""
          echo "üîó Service URL: $SERVICE_URL"
          echo "üè• Health Check: $SERVICE_URL/health"
          echo "üéÆ WebSocket Endpoint: $SERVICE_URL/socket.io/"
          echo "üåê Frontend: $SERVICE_URL/"
          echo ""
          echo "‚ú® Features Enabled:"
          echo "   ‚Ä¢ Frontend Integration with Real-Time Features"
          echo "   ‚Ä¢ Enhanced WebSocket Match Simulation"
          echo "   ‚Ä¢ Authentic Realm Rivalry Game Mechanics"
          echo "   ‚Ä¢ 6v6 Dome System with 5 Fantasy Races"
          echo "   ‚Ä¢ Live Match Viewing and Interaction"
          echo "   ‚Ä¢ Advanced Player Statistics and Events"
          echo "   ‚Ä¢ Multi-User Match Room Support"
          echo "   ‚Ä¢ Post-Match Analysis and MVP Selection"
          echo ""
          echo "üéØ Ready for comprehensive end-to-end testing!"