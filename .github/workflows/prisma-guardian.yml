name: 🗄️ Prisma Database Guardian Agent (Enhanced)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'prisma/**'
      - 'server/database.ts'
      - 'server/db.ts'
      - 'server/**/*.ts'
      - 'server/database/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'prisma/**'
      - 'server/database.ts'
      - 'server/db.ts' 
      - 'server/**/*.ts'
      - 'server/database/**'
  schedule:
    # Run weekly on Sundays at 3 AM UTC for maintenance
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      force_schema_validation:
        description: 'Force complete schema validation'
        required: false
        default: 'true'
        type: boolean
      auto_fix_patterns:
        description: 'Auto-fix common Prisma patterns'
        required: false
        default: 'true'
        type: boolean
      validate_8_agent_patterns:
        description: 'Validate 8-agent database refactoring patterns'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  enhanced-prisma-validation:
    name: Enhanced Database Schema & 8-Agent Pattern Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit for trend analysis

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          echo "🔄 Installing dependencies..."
          npm ci --include=dev
          echo "✅ Dependencies installed"

      # NEW: Download previous database state for trend analysis
      - name: 📊 Fetch Previous Database State
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: prisma-guardian-state-${{ github.event.before }}
          path: previous-db-state/

      # NEW: 8-Agent Database Pattern Validation
      - name: 🎯 8-Agent Database Refactoring Compliance
        id: database-compliance
        run: |
          echo "🎯 Validating 8-agent database refactoring patterns..."
          
          # DatabaseService Singleton Pattern Validation
          echo "🗄️ Checking DatabaseService singleton implementation..."
          if [ -f "server/database/DatabaseService.ts" ]; then
            SINGLETON_EXPORTS=$(grep -c "static getInstance\|private static instance" server/database/DatabaseService.ts || echo "0")
            PROPER_SINGLETON=$(grep -c "export class DatabaseService" server/database/DatabaseService.ts || echo "0")
            
            if [ "$SINGLETON_EXPORTS" -gt "0" ] && [ "$PROPER_SINGLETON" -gt "0" ]; then
              echo "✅ DatabaseService singleton properly implemented"
              echo "database_singleton=implemented" >> $GITHUB_OUTPUT
            else
              echo "⚠️ DatabaseService singleton pattern issues detected"
              echo "database_singleton=issues" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ DatabaseService.ts missing - critical regression!"
            echo "database_singleton=missing" >> $GITHUB_OUTPUT
          fi
          
          # Connection Usage Pattern Analysis
          echo "🔗 Analyzing database connection patterns..."
          DIRECT_PRISMA_USAGE=$(find server/ -name "*.ts" -exec grep -l "new PrismaClient" {} \; | wc -l || echo "0")
          SINGLETON_USAGE=$(find server/ -name "*.ts" -exec grep -l "DatabaseService\.getInstance\|getPrismaClient" {} \; | wc -l || echo "0")
          
          echo "Files with direct PrismaClient: $DIRECT_PRISMA_USAGE"
          echo "Files using singleton pattern: $SINGLETON_USAGE"
          
          echo "direct_prisma_usage=$DIRECT_PRISMA_USAGE" >> $GITHUB_OUTPUT
          echo "singleton_usage_count=$SINGLETON_USAGE" >> $GITHUB_OUTPUT
          
          # Database Connection Health Score
          if [ "$DIRECT_PRISMA_USAGE" -le "1" ] && [ "$SINGLETON_USAGE" -gt "0" ]; then
            CONNECTION_HEALTH=100
            echo "🎉 PERFECT: Database connection patterns optimal"
          elif [ "$DIRECT_PRISMA_USAGE" -le "3" ]; then
            CONNECTION_HEALTH=80
            echo "✅ GOOD: Minor connection pattern issues"
          else
            CONNECTION_HEALTH=$((100 - (DIRECT_PRISMA_USAGE * 10)))
            CONNECTION_HEALTH=$((CONNECTION_HEALTH < 0 ? 0 : CONNECTION_HEALTH))
            echo "⚠️ REGRESSION: Multiple direct PrismaClient instances detected"
          fi
          
          echo "connection_health_score=$CONNECTION_HEALTH" >> $GITHUB_OUTPUT

      # Enhanced Schema Validation
      - name: 🔍 Enhanced Prisma Schema Validation
        id: enhanced-schema-check
        run: |
          echo "🗄️ Running enhanced Prisma schema validation..."
          
          # Set dummy DATABASE_URL for CI validation
          export DATABASE_URL="postgresql://user:pass@localhost:5432/testdb"
          
          # Schema validation with detailed analysis
          set +e
          npx prisma validate > schema-validation.log 2>&1
          VALIDATION_RESULT=$?
          set -e
          
          if [ "$VALIDATION_RESULT" -eq "0" ]; then
            echo "✅ SCHEMA VALIDATION: Perfect - no issues detected"
            echo "schema_status=valid" >> $GITHUB_OUTPUT
            echo "schema_issues=0" >> $GITHUB_OUTPUT
          else
            # Analyze validation errors
            SYNTAX_ERRORS=$(grep -c "syntax error\|parsing error" schema-validation.log || echo "0")
            RELATION_ERRORS=$(grep -c "relation\|reference" schema-validation.log || echo "0")
            TYPE_ERRORS=$(grep -c "type\|field" schema-validation.log || echo "0")
            
            echo "schema_status=issues" >> $GITHUB_OUTPUT
            echo "schema_issues=$((SYNTAX_ERRORS + RELATION_ERRORS + TYPE_ERRORS))" >> $GITHUB_OUTPUT
            echo "syntax_errors=$SYNTAX_ERRORS" >> $GITHUB_OUTPUT
            echo "relation_errors=$RELATION_ERRORS" >> $GITHUB_OUTPUT
            echo "type_errors=$TYPE_ERRORS" >> $GITHUB_OUTPUT
            
            echo "⚠️ SCHEMA VALIDATION: Issues detected"
            echo "   Syntax errors: $SYNTAX_ERRORS"
            echo "   Relation errors: $RELATION_ERRORS"
            echo "   Type errors: $TYPE_ERRORS"
          fi

      # NEW: Performance Pattern Analysis
      - name: ⚡ Database Performance Pattern Analysis
        id: performance-patterns
        run: |
          echo "⚡ Analyzing database performance patterns..."
          
          # N+1 Query Risk Detection
          N_PLUS_ONE_RISKS=$(grep -r "for.*await.*prisma\|forEach.*await.*prisma\|map.*await.*prisma" server/ --include="*.ts" | wc -l || echo "0")
          
          # Query Optimization Analysis
          UNOPTIMIZED_QUERIES=$(grep -r "prisma\..*\.findMany" server/ --include="*.ts" | grep -v "take\|limit\|skip" | wc -l || echo "0")
          TOTAL_QUERIES=$(grep -r "prisma\..*\.find" server/ --include="*.ts" | wc -l || echo "1")
          OPTIMIZATION_RATIO=$((100 - (UNOPTIMIZED_QUERIES * 100 / TOTAL_QUERIES)))
          
          # Transaction Usage Analysis
          TRANSACTION_USAGE=$(grep -r "\$transaction" server/ --include="*.ts" | wc -l || echo "0")
          CRITICAL_OPERATIONS=$(grep -r "prisma.*create.*update\|prisma.*update.*create\|prisma.*delete.*create" server/ --include="*.ts" | wc -l || echo "0")
          TRANSACTION_COVERAGE=$((TRANSACTION_USAGE * 100 / (CRITICAL_OPERATIONS + 1)))
          
          # Complex Query Detection
          COMPLEX_QUERIES=$(grep -r "include.*{.*include\|select.*{.*select" server/ --include="*.ts" | wc -l || echo "0")
          
          echo "N+1 query risks: $N_PLUS_ONE_RISKS"
          echo "Unoptimized queries: $UNOPTIMIZED_QUERIES of $TOTAL_QUERIES"
          echo "Query optimization ratio: $OPTIMIZATION_RATIO%"
          echo "Transaction coverage: $TRANSACTION_COVERAGE%"
          echo "Complex queries: $COMPLEX_QUERIES"
          
          echo "n_plus_one_risks=$N_PLUS_ONE_RISKS" >> $GITHUB_OUTPUT
          echo "unoptimized_queries=$UNOPTIMIZED_QUERIES" >> $GITHUB_OUTPUT
          echo "optimization_ratio=$OPTIMIZATION_RATIO" >> $GITHUB_OUTPUT
          echo "transaction_coverage=$TRANSACTION_COVERAGE" >> $GITHUB_OUTPUT
          echo "complex_queries=$COMPLEX_QUERIES" >> $GITHUB_OUTPUT
          
          # Performance Score Calculation
          PERFORMANCE_SCORE=100
          PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - (N_PLUS_ONE_RISKS * 15)))
          PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - ((100 - OPTIMIZATION_RATIO) / 2)))
          PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - ((100 - TRANSACTION_COVERAGE) / 5)))
          PERFORMANCE_SCORE=$((PERFORMANCE_SCORE - (COMPLEX_QUERIES * 5)))
          PERFORMANCE_SCORE=$((PERFORMANCE_SCORE < 0 ? 0 : PERFORMANCE_SCORE))
          
          echo "db_performance_score=$PERFORMANCE_SCORE" >> $GITHUB_OUTPUT
          
          if [ "$PERFORMANCE_SCORE" -ge "80" ]; then
            echo "🎉 DATABASE PERFORMANCE: Excellent optimization"
          elif [ "$PERFORMANCE_SCORE" -ge "60" ]; then
            echo "✅ DATABASE PERFORMANCE: Good with minor optimizations needed"
          else
            echo "⚠️ DATABASE PERFORMANCE: Significant optimization opportunities"
          fi

      # Enhanced Client Generation Test
      - name: 🔄 Enhanced Prisma Client Generation & Analysis
        id: enhanced-client-generation
        run: |
          echo "🔄 Testing enhanced Prisma client generation..."
          
          export DATABASE_URL="postgresql://user:pass@localhost:5432/testdb"
          
          # Generate client with enhanced monitoring
          set +e
          npx prisma generate > client-generation.log 2>&1
          GENERATION_RESULT=$?
          set -e
          
          if [ "$GENERATION_RESULT" -eq "0" ]; then
            echo "✅ PRISMA CLIENT: Generation successful"
            echo "generation_status=success" >> $GITHUB_OUTPUT
            
            # Analyze generated client
            if [ -f "prisma/generated/client/index.d.ts" ]; then
              GENERATED_MODELS=$(grep -c "export.*interface.*\|export.*type.*" prisma/generated/client/index.d.ts || echo "0")
              PRISMA_TYPES=$(grep -c "Prisma\." prisma/generated/client/index.d.ts || echo "0")
              
              echo "Generated models/types: $GENERATED_MODELS"
              echo "Prisma utility types: $PRISMA_TYPES"
              
              echo "generated_models=$GENERATED_MODELS" >> $GITHUB_OUTPUT
              echo "prisma_types=$PRISMA_TYPES" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Generated client types not found"
              echo "generated_models=0" >> $GITHUB_OUTPUT
              echo "prisma_types=0" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ PRISMA CLIENT: Generation failed"
            echo "generation_status=failed" >> $GITHUB_OUTPUT
            
            # Analyze generation errors
            if [ -f "client-generation.log" ]; then
              SCHEMA_ERRORS=$(grep -c "schema\|model" client-generation.log || echo "0")
              DEPENDENCY_ERRORS=$(grep -c "dependency\|module" client-generation.log || echo "0")
              echo "Schema-related errors: $SCHEMA_ERRORS"
              echo "Dependency errors: $DEPENDENCY_ERRORS"
            fi
          fi

      # NEW: Database Evolution Trend Analysis
      - name: 📈 Database Evolution Trend Analysis
        id: db-evolution
        run: |
          echo "📈 Analyzing database evolution trends..."
          
          # Current metrics
          CURRENT_MODELS=$(grep -c "^model " prisma/schema.prisma || echo "0")
          CURRENT_RELATIONS=$(grep -c "@@relation\|@relation" prisma/schema.prisma || echo "0")
          CURRENT_INDICES=$(grep -c "@@index\|@@unique" prisma/schema.prisma || echo "0")
          
          echo "Current schema metrics:"
          echo "  Models: $CURRENT_MODELS"
          echo "  Relations: $CURRENT_RELATIONS"
          echo "  Indices: $CURRENT_INDICES"
          
          # Compare with previous state
          TREND="stable"
          MODEL_DELTA=0
          RELATION_DELTA=0
          INDEX_DELTA=0
          
          if [ -f "previous-db-state/schema-metrics.json" ]; then
            PREVIOUS_MODELS=$(jq -r '.models // 0' previous-db-state/schema-metrics.json)
            PREVIOUS_RELATIONS=$(jq -r '.relations // 0' previous-db-state/schema-metrics.json)
            PREVIOUS_INDICES=$(jq -r '.indices // 0' previous-db-state/schema-metrics.json)
            
            MODEL_DELTA=$((CURRENT_MODELS - PREVIOUS_MODELS))
            RELATION_DELTA=$((CURRENT_RELATIONS - PREVIOUS_RELATIONS))
            INDEX_DELTA=$((CURRENT_INDICES - PREVIOUS_INDICES))
            
            echo "Evolution deltas:"
            echo "  Models: $PREVIOUS_MODELS → $CURRENT_MODELS (Δ$MODEL_DELTA)"
            echo "  Relations: $PREVIOUS_RELATIONS → $CURRENT_RELATIONS (Δ$RELATION_DELTA)"
            echo "  Indices: $PREVIOUS_INDICES → $CURRENT_INDICES (Δ$INDEX_DELTA)"
            
            # Determine trend
            TOTAL_CHANGES=$((MODEL_DELTA + RELATION_DELTA + INDEX_DELTA))
            if [ "$TOTAL_CHANGES" -gt "5" ]; then
              TREND="significant_growth"
              echo "📈 TREND: Significant database growth"
            elif [ "$TOTAL_CHANGES" -gt "2" ]; then
              TREND="moderate_growth"
              echo "📈 TREND: Moderate database evolution"
            elif [ "$TOTAL_CHANGES" -lt "-2" ]; then
              TREND="reduction"
              echo "📉 TREND: Database schema reduction"
            else
              TREND="stable"
              echo "📊 TREND: Stable schema evolution"
            fi
          else
            echo "📊 BASELINE: Establishing database evolution baseline"
          fi
          
          echo "current_models=$CURRENT_MODELS" >> $GITHUB_OUTPUT
          echo "current_relations=$CURRENT_RELATIONS" >> $GITHUB_OUTPUT
          echo "current_indices=$CURRENT_INDICES" >> $GITHUB_OUTPUT
          echo "evolution_trend=$TREND" >> $GITHUB_OUTPUT
          echo "model_delta=$MODEL_DELTA" >> $GITHUB_OUTPUT
          echo "relation_delta=$RELATION_DELTA" >> $GITHUB_OUTPUT
          echo "index_delta=$INDEX_DELTA" >> $GITHUB_OUTPUT

      # Enhanced Database Integration Check
      - name: 🔗 Enhanced Database Integration Validation
        id: enhanced-integration-check
        run: |
          echo "🗄️ Running enhanced database integration validation..."
          
          # Analyze integration patterns with 8-agent awareness
          FILES_WITH_PRISMA=$(find server/ -name "*.ts" -exec grep -l "prisma\." {} \; 2>/dev/null | wc -l || echo "0")
          
          echo "📋 Analyzing $FILES_WITH_PRISMA files with Prisma usage..."
          
          PROPER_INIT_COUNT=0
          SINGLETON_PATTERN_COUNT=0
          LEGACY_PATTERN_COUNT=0
          
          if [ "$FILES_WITH_PRISMA" -gt "0" ]; then
            # Check each file for proper patterns
            find server/ -name "*.ts" -exec grep -l "prisma\." {} \; | while read file; do
              if grep -q "DatabaseService\.getInstance" "$file"; then
                echo "✅ $file: Using DatabaseService singleton (8-agent pattern)"
                SINGLETON_PATTERN_COUNT=$((SINGLETON_PATTERN_COUNT + 1))
              elif grep -q "getPrismaClient\|const prisma = await\|const.*prisma.*=" "$file"; then
                echo "✅ $file: Proper initialization pattern"
                PROPER_INIT_COUNT=$((PROPER_INIT_COUNT + 1))
              else
                echo "⚠️ $file: Legacy or missing initialization pattern"
                LEGACY_PATTERN_COUNT=$((LEGACY_PATTERN_COUNT + 1))
              fi
            done
          fi
          
          # Count actual usage (more reliable than while loop output)
          SINGLETON_PATTERN_COUNT=$(find server/ -name "*.ts" -exec grep -l "DatabaseService\.getInstance" {} \; | wc -l || echo "0")
          LEGACY_PATTERN_COUNT=$(find server/ -name "*.ts" -exec grep -l "prisma\." {} \; | grep -v -E "DatabaseService|getPrismaClient|const.*prisma.*=" | wc -l || echo "0")
          PROPER_INIT_COUNT=$((FILES_WITH_PRISMA - SINGLETON_PATTERN_COUNT - LEGACY_PATTERN_COUNT))
          
          echo "Integration pattern analysis:"
          echo "  DatabaseService singleton: $SINGLETON_PATTERN_COUNT"
          echo "  Proper initialization: $PROPER_INIT_COUNT"
          echo "  Legacy patterns: $LEGACY_PATTERN_COUNT"
          
          echo "singleton_pattern_count=$SINGLETON_PATTERN_COUNT" >> $GITHUB_OUTPUT
          echo "proper_init_count=$PROPER_INIT_COUNT" >> $GITHUB_OUTPUT
          echo "legacy_pattern_count=$LEGACY_PATTERN_COUNT" >> $GITHUB_OUTPUT
          
          # Integration health score
          TOTAL_FILES=$((SINGLETON_PATTERN_COUNT + PROPER_INIT_COUNT + LEGACY_PATTERN_COUNT))
          if [ "$TOTAL_FILES" -gt "0" ]; then
            MODERN_PATTERNS=$((SINGLETON_PATTERN_COUNT + PROPER_INIT_COUNT))
            INTEGRATION_HEALTH=$((MODERN_PATTERNS * 100 / TOTAL_FILES))
            
            # Bonus for 8-agent singleton pattern
            if [ "$SINGLETON_PATTERN_COUNT" -gt "0" ]; then
              SINGLETON_BONUS=$((SINGLETON_PATTERN_COUNT * 100 / TOTAL_FILES))
              INTEGRATION_HEALTH=$((INTEGRATION_HEALTH + (SINGLETON_BONUS / 4)))
              INTEGRATION_HEALTH=$((INTEGRATION_HEALTH > 100 ? 100 : INTEGRATION_HEALTH))
            fi
          else
            INTEGRATION_HEALTH=100
          fi
          
          echo "integration_health_score=$INTEGRATION_HEALTH" >> $GITHUB_OUTPUT
          
          if [ "$INTEGRATION_HEALTH" -ge "90" ]; then
            echo "🎉 DATABASE INTEGRATION: Excellent - 8-agent patterns dominant"
            echo "integration_status=excellent" >> $GITHUB_OUTPUT
          elif [ "$INTEGRATION_HEALTH" -ge "70" ]; then
            echo "✅ DATABASE INTEGRATION: Good - modern patterns in use"
            echo "integration_status=good" >> $GITHUB_OUTPUT
          else
            echo "⚠️ DATABASE INTEGRATION: Needs improvement - too many legacy patterns"
            echo "integration_status=needs_improvement" >> $GITHUB_OUTPUT
          fi

      # NEW: Database Crisis Detection
      - name: 🚨 Database Crisis Detection & Assessment
        id: db-crisis-detection
        run: |
          echo "🚨 Analyzing for database crisis conditions..."
          
          CONNECTION_HEALTH="${{ steps.database-compliance.outputs.connection_health_score }}"
          PERFORMANCE_SCORE="${{ steps.performance-patterns.outputs.db_performance_score }}"
          INTEGRATION_HEALTH="${{ steps.enhanced-integration-check.outputs.integration_health_score }}"
          GENERATION_STATUS="${{ steps.enhanced-client-generation.outputs.generation_status }}"
          SCHEMA_STATUS="${{ steps.enhanced-schema-check.outputs.schema_status }}"
          
          CRISIS_LEVEL="none"
          CRISIS_REASONS=()
          
          # Critical crisis conditions
          if [ "$GENERATION_STATUS" = "failed" ]; then
            CRISIS_LEVEL="critical"
            CRISIS_REASONS+=("Prisma client generation failed - deployment blocked")
          fi
          
          if [ "$SCHEMA_STATUS" = "issues" ] && [ "${{ steps.enhanced-schema-check.outputs.syntax_errors }}" -gt "0" ]; then
            CRISIS_LEVEL="critical"
            CRISIS_REASONS+=("Schema syntax errors preventing generation")
          fi
          
          # High severity conditions
          if [ "$CONNECTION_HEALTH" -lt "50" ]; then
            if [ "$CRISIS_LEVEL" = "none" ]; then CRISIS_LEVEL="high"; fi
            CRISIS_REASONS+=("Severe database connection pattern regression")
          fi
          
          if [ "$PERFORMANCE_SCORE" -lt "40" ]; then
            if [ "$CRISIS_LEVEL" = "none" ]; then CRISIS_LEVEL="high"; fi
            CRISIS_REASONS+=("Critical database performance issues")
          fi
          
          # Medium severity conditions
          if [ "$INTEGRATION_HEALTH" -lt "60" ]; then
            if [ "$CRISIS_LEVEL" = "none" ]; then CRISIS_LEVEL="medium"; fi
            CRISIS_REASONS+=("Database integration patterns need attention")
          fi
          
          if [ "${{ steps.performance-patterns.outputs.n_plus_one_risks }}" -gt "10" ]; then
            if [ "$CRISIS_LEVEL" = "none" ]; then CRISIS_LEVEL="medium"; fi
            CRISIS_REASONS+=("High N+1 query risk count")
          fi
          
          echo "crisis_level=$CRISIS_LEVEL" >> $GITHUB_OUTPUT
          echo "crisis_reasons=${CRISIS_REASONS[*]}" >> $GITHUB_OUTPUT
          
          echo "🚨 Database Crisis Analysis:"
          echo "   Level: $CRISIS_LEVEL"
          echo "   Connection Health: $CONNECTION_HEALTH/100"
          echo "   Performance Score: $PERFORMANCE_SCORE/100"
          echo "   Integration Health: $INTEGRATION_HEALTH/100"
          echo "   Reasons: ${CRISIS_REASONS[*]}"
          
          # Crisis response recommendations
          if [ "$CRISIS_LEVEL" = "critical" ]; then
            echo "🚨 CRITICAL DATABASE CRISIS"
            echo "📋 IMMEDIATE ACTIONS:"
            echo "   1. Fix Prisma schema syntax errors"
            echo "   2. Verify database connection configuration"
            echo "   3. Check Prisma client generation process"
          elif [ "$CRISIS_LEVEL" = "high" ]; then
            echo "⚠️ HIGH SEVERITY DATABASE ISSUES"
            echo "📋 URGENT ACTIONS:"
            echo "   1. Review database connection patterns"
            echo "   2. Optimize database queries"
            echo "   3. Consider 8-agent pattern adoption"
          elif [ "$CRISIS_LEVEL" = "medium" ]; then
            echo "⚠️ MODERATE DATABASE ISSUES"
            echo "📋 RECOMMENDED ACTIONS:"
            echo "   1. Improve database integration patterns"
            echo "   2. Reduce N+1 query risks"
            echo "   3. Plan DatabaseService singleton migration"
          fi

      # Enhanced Auto-Fix with 8-Agent Intelligence
      - name: 🔧 Intelligent Database Auto-Fix
        if: ${{ github.event.inputs.auto_fix_patterns == 'true' && steps.db-crisis-detection.outputs.crisis_level != 'critical' }}
        run: |
          echo "🔧 Running intelligent database pattern auto-fixes..."
          
          LEGACY_PATTERNS="${{ steps.enhanced-integration-check.outputs.legacy_pattern_count }}"
          CRISIS_LEVEL="${{ steps.db-crisis-detection.outputs.crisis_level }}"
          
          if [ "$LEGACY_PATTERNS" -gt "0" ] && [ "$CRISIS_LEVEL" != "critical" ]; then
            echo "🔧 Auto-fixing database integration patterns..."
            
            # Find files using prisma without proper initialization
            find server/ -name "*.ts" -exec grep -l "prisma\." {} \; | while read file; do
              if ! grep -q "DatabaseService\.getInstance\|getPrismaClient\|const prisma = await" "$file"; then
                echo "🔧 Attempting to fix database pattern in $file"
                
                # Calculate relative path to DatabaseService
                DEPTH=$(echo "$file" | grep -o "/" | wc -l)
                RELATIVE_PATH=""
                for i in $(seq 1 $((DEPTH - 1))); do
                  RELATIVE_PATH="../$RELATIVE_PATH"
                done
                
                # Add DatabaseService import if not present
                if ! grep -q "import.*DatabaseService" "$file" && [ -f "server/database/DatabaseService.ts" ]; then
                  sed -i "1i import { DatabaseService } from \"${RELATIVE_PATH}database/DatabaseService\";" "$file"
                  echo "   ✅ Added DatabaseService import to $file"
                elif ! grep -q "import.*getPrismaClient" "$file"; then
                  sed -i "1i import { getPrismaClient } from \"${RELATIVE_PATH}db\";" "$file"
                  echo "   ✅ Added getPrismaClient import to $file"
                fi
              fi
            done
            
            echo "✅ Database pattern auto-fixes applied"
            echo "auto_fix_applied=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Skipping auto-fix: too many issues or critical crisis level"
            echo "auto_fix_applied=false" >> $GITHUB_OUTPUT
          fi

      # Generate Enhanced Database State
      - name: 📊 Generate Enhanced Database State
        run: |
          echo "📊 Creating enhanced database state for future analysis..."
          
          mkdir -p prisma-state
          
          # Create comprehensive state file
          cat > prisma-state/schema-metrics.json << EOF
          {
            "timestamp": "$(date -Iseconds)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "schema": {
              "models": ${{ steps.db-evolution.outputs.current_models }},
              "relations": ${{ steps.db-evolution.outputs.current_relations }},
              "indices": ${{ steps.db-evolution.outputs.current_indices }},
              "status": "${{ steps.enhanced-schema-check.outputs.schema_status }}",
              "issues": ${{ steps.enhanced-schema-check.outputs.schema_issues }}
            },
            "performance": {
              "score": ${{ steps.performance-patterns.outputs.db_performance_score }},
              "n_plus_one_risks": ${{ steps.performance-patterns.outputs.n_plus_one_risks }},
              "optimization_ratio": ${{ steps.performance-patterns.outputs.optimization_ratio }},
              "transaction_coverage": ${{ steps.performance-patterns.outputs.transaction_coverage }},
              "complex_queries": ${{ steps.performance-patterns.outputs.complex_queries }}
            },
            "integration": {
              "health_score": ${{ steps.enhanced-integration-check.outputs.integration_health_score }},
              "singleton_patterns": ${{ steps.enhanced-integration-check.outputs.singleton_pattern_count }},
              "proper_init": ${{ steps.enhanced-integration-check.outputs.proper_init_count }},
              "legacy_patterns": ${{ steps.enhanced-integration-check.outputs.legacy_pattern_count }}
            },
            "compliance": {
              "connection_health": ${{ steps.database-compliance.outputs.connection_health_score }},
              "database_singleton": "${{ steps.database-compliance.outputs.database_singleton }}",
              "direct_prisma_usage": ${{ steps.database-compliance.outputs.direct_prisma_usage }},
              "singleton_usage": ${{ steps.database-compliance.outputs.singleton_usage_count }}
            },
            "evolution": {
              "trend": "${{ steps.db-evolution.outputs.evolution_trend }}",
              "model_delta": ${{ steps.db-evolution.outputs.model_delta }},
              "relation_delta": ${{ steps.db-evolution.outputs.relation_delta }},
              "index_delta": ${{ steps.db-evolution.outputs.index_delta }}
            },
            "crisis": {
              "level": "${{ steps.db-crisis-detection.outputs.crisis_level }}",
              "reasons": "${{ steps.db-crisis-detection.outputs.crisis_reasons }}"
            }
          }
          EOF
          
          # Copy current schema for next run comparison
          cp prisma/schema.prisma prisma-state/schema.prisma

      - name: 📤 Upload Enhanced Database Analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prisma-guardian-state-${{ github.sha }}
          path: |
            prisma-state/
            schema-validation.log
            client-generation.log
            *.log
          retention-days: 30

      - name: 📊 Enhanced Database Guardian Summary
        run: |
          echo ""
          echo "🗄️ ENHANCED PRISMA DATABASE GUARDIAN REPORT"
          echo "============================================="
          echo "🗓️ Analysis Date: $(date)"
          echo "🎯 Commit: ${{ github.sha }}"
          echo "🌿 Branch: ${{ github.ref_name }}"
          echo ""
          echo "🎯 8-AGENT DATABASE COMPLIANCE:"
          echo "   DatabaseService Singleton: ${{ steps.database-compliance.outputs.database_singleton }}"
          echo "   Connection Health Score: ${{ steps.database-compliance.outputs.connection_health_score }}/100"
          echo "   Direct PrismaClient Usage: ${{ steps.database-compliance.outputs.direct_prisma_usage }}"
          echo "   Singleton Pattern Usage: ${{ steps.database-compliance.outputs.singleton_usage_count }}"
          echo ""
          echo "🗄️ SCHEMA VALIDATION:"
          echo "   Status: ${{ steps.enhanced-schema-check.outputs.schema_status }}"
          echo "   Issues Count: ${{ steps.enhanced-schema-check.outputs.schema_issues }}"
          echo "   Client Generation: ${{ steps.enhanced-client-generation.outputs.generation_status }}"
          echo "   Generated Models: ${{ steps.enhanced-client-generation.outputs.generated_models }}"
          echo ""
          echo "⚡ PERFORMANCE ANALYSIS:"
          echo "   Performance Score: ${{ steps.performance-patterns.outputs.db_performance_score }}/100"
          echo "   N+1 Query Risks: ${{ steps.performance-patterns.outputs.n_plus_one_risks }}"
          echo "   Query Optimization Ratio: ${{ steps.performance-patterns.outputs.optimization_ratio }}%"
          echo "   Transaction Coverage: ${{ steps.performance-patterns.outputs.transaction_coverage }}%"
          echo "   Complex Queries: ${{ steps.performance-patterns.outputs.complex_queries }}"
          echo ""
          echo "🔗 INTEGRATION PATTERNS:"
          echo "   Integration Health: ${{ steps.enhanced-integration-check.outputs.integration_health_score }}/100"
          echo "   Singleton Patterns: ${{ steps.enhanced-integration-check.outputs.singleton_pattern_count }}"
          echo "   Proper Initialization: ${{ steps.enhanced-integration-check.outputs.proper_init_count }}"
          echo "   Legacy Patterns: ${{ steps.enhanced-integration-check.outputs.legacy_pattern_count }}"
          echo ""
          echo "📈 EVOLUTION TRENDS:"
          echo "   Trend: ${{ steps.db-evolution.outputs.evolution_trend }}"
          echo "   Models: ${{ steps.db-evolution.outputs.current_models }} (Δ${{ steps.db-evolution.outputs.model_delta }})"
          echo "   Relations: ${{ steps.db-evolution.outputs.current_relations }} (Δ${{ steps.db-evolution.outputs.relation_delta }})"
          echo "   Indices: ${{ steps.db-evolution.outputs.current_indices }} (Δ${{ steps.db-evolution.outputs.index_delta }})"
          echo ""
          echo "🚨 CRISIS ANALYSIS:"
          echo "   Crisis Level: ${{ steps.db-crisis-detection.outputs.crisis_level }}"
          echo "   Crisis Reasons: ${{ steps.db-crisis-detection.outputs.crisis_reasons }}"
          echo ""
          
          # Overall status determination
          CONNECTION_HEALTH=${{ steps.database-compliance.outputs.connection_health_score }}
          PERFORMANCE_SCORE=${{ steps.performance-patterns.outputs.db_performance_score }}
          INTEGRATION_HEALTH=${{ steps.enhanced-integration-check.outputs.integration_health_score }}
          CRISIS_LEVEL="${{ steps.db-crisis-detection.outputs.crisis_level }}"
          GENERATION_STATUS="${{ steps.enhanced-client-generation.outputs.generation_status }}"
          
          if [ "$CONNECTION_HEALTH" -ge "90" ] && [ "$PERFORMANCE_SCORE" -ge "80" ] && [ "$INTEGRATION_HEALTH" -ge "85" ] && [ "$GENERATION_STATUS" = "success" ]; then
            echo "🎉 STATUS: DATABASE EXCELLENCE ACHIEVED"
            echo "✅ Perfect 8-agent pattern compliance"
            echo "✅ Optimal performance characteristics"
            echo "✅ Modern integration patterns dominant"
            echo "✅ Schema and client generation perfect"
            echo "🚀 DEPLOYMENT CONFIDENCE: MAXIMUM"
          elif [ "$CRISIS_LEVEL" = "none" ] && [ "$GENERATION_STATUS" = "success" ]; then
            echo "🎉 STATUS: DATABASE SYSTEM HEALTHY"
            echo "✅ Client generation successful"
            echo "✅ No crisis conditions detected"
            if [ "$CONNECTION_HEALTH" -ge "80" ]; then
              echo "✅ Good connection pattern compliance"
            fi
            if [ "$PERFORMANCE_SCORE" -ge "70" ]; then
              echo "✅ Acceptable performance characteristics"
            fi
            echo "🚀 DEPLOYMENT READY"
          elif [ "$CRISIS_LEVEL" = "medium" ]; then
            echo "⚠️ STATUS: DATABASE NEEDS ATTENTION"
            echo "✅ Core functionality operational"
            echo "⚠️ Optimization opportunities identified"
            echo "📋 Recommend addressing patterns before major releases"
            echo "🚀 DEPLOYMENT VIABLE WITH MONITORING"
          else
            echo "❌ STATUS: DATABASE CRISIS DETECTED"
            echo "🚨 Critical issues requiring immediate attention"
            echo "🔧 Database patterns or schema issues blocking deployment"
            if [ "$GENERATION_STATUS" = "failed" ]; then
              echo "❌ Client generation failure - deployment impossible"
            fi
            echo "❌ DEPLOYMENT BLOCKED UNTIL RESOLVED"
          fi
          echo "============================================="

      - name: 🚦 Enhanced Database Quality Gate
        run: |
          GENERATION_STATUS="${{ steps.enhanced-client-generation.outputs.generation_status }}"
          CRISIS_LEVEL="${{ steps.db-crisis-detection.outputs.crisis_level }}"
          CONNECTION_HEALTH=${{ steps.database-compliance.outputs.connection_health_score }}
          SCHEMA_STATUS="${{ steps.enhanced-schema-check.outputs.schema_status }}"
          
          # Critical failure conditions
          if [ "$GENERATION_STATUS" = "failed" ]; then
            echo "❌ CRITICAL FAILURE: Prisma client generation failed"
            echo "🔧 Client generation failure will block deployment"
            exit 1
          fi
          
          if [ "$CRISIS_LEVEL" = "critical" ]; then
            echo "❌ CRITICAL FAILURE: Database crisis conditions detected"
            echo "🔧 Critical database issues must be resolved before deployment"
            exit 1
          fi
          
          if [ "$SCHEMA_STATUS" = "issues" ] && [ "${{ steps.enhanced-schema-check.outputs.syntax_errors }}" -gt "0" ]; then
            echo "❌ CRITICAL FAILURE: Schema syntax errors detected"
            echo "🔧 Schema errors will prevent proper database operation"
            exit 1
          fi
          
          # Warning conditions (don't fail but alert)
          if [ "$CONNECTION_HEALTH" -lt "60" ]; then
            echo "⚠️ WARNING: Database connection pattern regression detected"
            echo "🔧 8-agent refactoring achievements at risk - review DatabaseService usage"
          fi
          
          if [ "$CRISIS_LEVEL" = "high" ]; then
            echo "⚠️ WARNING: High severity database issues detected"
            echo "🔧 Strongly recommend addressing before production deployment"
          fi
          
          if [ "${{ steps.performance-patterns.outputs.n_plus_one_risks }}" -gt "15" ]; then
            echo "⚠️ WARNING: High N+1 query risk count"
            echo "🔧 Consider database query optimization"
          fi
          
          echo "✅ SUCCESS: Enhanced Prisma Database Guardian completed"
          echo "🗄️ Client Generation: $GENERATION_STATUS"
          echo "🎯 8-Agent Compliance: $CONNECTION_HEALTH/100"
          echo "⚡ Performance Score: ${{ steps.performance-patterns.outputs.db_performance_score }}/100"
          echo "🔗 Integration Health: ${{ steps.enhanced-integration-check.outputs.integration_health_score }}/100"
          echo "🚨 Crisis Level: $CRISIS_LEVEL"
          echo "🚀 Database quality gates passed - deployment ready"
          exit 0