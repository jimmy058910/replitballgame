name: üöÄ Deployment Readiness Agent

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      full_deployment_check:
        description: 'Run full deployment simulation'
        required: false
        default: 'true'
        type: boolean
      check_docker_build:
        description: 'Test Docker build process'
        required: false
        default: 'true'
        type: boolean

env:
  NODE_VERSION: '20'
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-central1
  SERVICE_NAME: realm-rivalry-unified

jobs:
  deployment-validation:
    name: Pre-Deployment Validation & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: üê≥ Setup Docker Buildx
        if: github.event.inputs.check_docker_build == 'true' || github.event.inputs.check_docker_build == null
        uses: docker/setup-buildx-action@v3

      - name: üì¶ Install Dependencies
        run: |
          echo "üîÑ Installing all dependencies..."
          npm ci --include=dev
          echo "‚úÖ Dependencies installed successfully"

      - name: üóÑÔ∏è Generate Prisma Client
        run: |
          echo "üîÑ Generating Prisma client for deployment..."
          npx prisma generate
          echo "‚úÖ Prisma client ready for deployment"

      - name: üèóÔ∏è Critical Path Compilation Test
        id: compilation-test
        run: |
          echo "üöÄ Testing deployment-critical compilation..."
          
          # Test server compilation (critical for deployment) - production-aligned
          echo "üìä Testing server TypeScript compilation..."
          npm run build:server > build-output.log 2>&1 || true
          
          # Check if JavaScript files were generated (production behavior)
          if [ -d "dist/server" ] && [ "$(find dist/server -name "*.js" | wc -l)" -gt "0" ]; then
            echo "‚úÖ SERVER COMPILATION: JavaScript files generated - ready for deployment"
            echo "server_compilation=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå SERVER COMPILATION: Failed to generate JavaScript files - DEPLOYMENT BLOCKED"
            echo "server_compilation=failed" >> $GITHUB_OUTPUT
          fi
          
          # Test client build (critical for production)
          echo "üéØ Testing client production build..."
          if npm run build; then
            echo "‚úÖ CLIENT BUILD: Ready for deployment"
            echo "client_build=success" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è CLIENT BUILD: May affect frontend"
            echo "client_build=failed" >> $GITHUB_OUTPUT
          fi

      - name: üîç Deployment Files Validation
        id: files-check
        run: |
          echo "üöÄ Validating deployment-critical files..."
          
          CRITICAL_FILES=(
            "Dockerfile.step7-unified-fixed"
            "package.json"
            "prisma/schema.prisma"
            "server-step7-unified.js"
            "server/database.ts"
            "server/db.ts"
            ".github/workflows/deploy-step7-unified.yml"
            "cloudbuild-deployment.yaml"
          )
          
          MISSING_FILES=0
          echo "üìã Checking critical deployment files:"
          
          for file in "${CRITICAL_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "  ‚úÖ $file"
            else
              echo "  ‚ùå MISSING: $file"
              MISSING_FILES=$((MISSING_FILES + 1))
            fi
          done
          
          echo "missing_files=$MISSING_FILES" >> $GITHUB_OUTPUT
          
          if [ "$MISSING_FILES" -eq "0" ]; then
            echo "‚úÖ ALL DEPLOYMENT FILES: Present and ready"
            echo "files_status=complete" >> $GITHUB_OUTPUT
          else
            echo "‚ùå DEPLOYMENT FILES: $MISSING_FILES missing critical files"
            echo "files_status=incomplete" >> $GITHUB_OUTPUT
          fi

      - name: ‚öôÔ∏è Environment Configuration Check
        id: env-check
        run: |
          echo "üîß Checking deployment environment configuration..."
          
          # Check if deployment workflow has required secrets configured
          REQUIRED_SECRETS=(
            "GOOGLE_SERVICE_ACCOUNT_KEY"
            "DATABASE_URL"
            "SESSION_SECRET" 
            "VITE_FIREBASE_API_KEY"
            "VITE_FIREBASE_PROJECT_ID"
            "VITE_FIREBASE_APP_ID"
          )
          
          echo "üìã Required deployment secrets:"
          SECRET_WARNINGS=0
          
          # Note: We can't actually check secret values in Actions, but we can check the workflow file
          WORKFLOW_FILE=".github/workflows/deploy-step7-unified.yml"
          
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if grep -q "$secret" "$WORKFLOW_FILE"; then
              echo "  ‚úÖ $secret (referenced in workflow)"
            else
              echo "  ‚ö†Ô∏è $secret (not found in workflow)"
              SECRET_WARNINGS=$((SECRET_WARNINGS + 1))
            fi
          done
          
          echo "secret_warnings=$SECRET_WARNINGS" >> $GITHUB_OUTPUT
          
          if [ "$SECRET_WARNINGS" -eq "0" ]; then
            echo "env_config=complete" >> $GITHUB_OUTPUT
          else
            echo "env_config=warnings" >> $GITHUB_OUTPUT
          fi

      - name: üê≥ Docker Build Test (If Enabled)
        if: github.event.inputs.check_docker_build == 'true' || github.event.inputs.check_docker_build == null
        id: docker-test
        run: |
          echo "üê≥ Testing Docker build process..."
          
          # Check if Dockerfile exists (updated name)
          if [ ! -f "Dockerfile.step7-unified-fixed" ]; then
            echo "‚ùå DOCKER: Dockerfile.step7-unified-fixed not found"
            echo "docker_status=missing_dockerfile" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Test Docker build (without pushing)
          echo "üèóÔ∏è Testing multi-stage Docker build..."
          
          # Use dummy values for build args since we're just testing the build process
          if docker build \
            -f Dockerfile.step7-unified-fixed \
            --build-arg VITE_FIREBASE_API_KEY="test" \
            --build-arg VITE_FIREBASE_PROJECT_ID="test" \
            --build-arg VITE_FIREBASE_APP_ID="test" \
            -t deployment-test:latest \
            .; then
            echo "‚úÖ DOCKER BUILD: Successful"
            echo "docker_status=success" >> $GITHUB_OUTPUT
            
            # Clean up test image
            docker rmi deployment-test:latest || true
          else
            echo "‚ùå DOCKER BUILD: Failed"
            echo "docker_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: üéØ Database Connection Pattern Validation
        id: db-patterns
        run: |
          echo "üóÑÔ∏è Validating database connection patterns for Cloud Run..."
          
          # Check for proper lazy initialization patterns
          if grep -q "ensureDatabaseConnection\|getPrismaClient" server/database.ts; then
            echo "‚úÖ DATABASE PATTERNS: Cloud Run compatible lazy initialization"
            echo "db_patterns=cloud_run_ready" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è DATABASE PATTERNS: May not be Cloud Run optimized"
            echo "db_patterns=needs_review" >> $GITHUB_OUTPUT
          fi
          
          # Check for proper error handling in database connections
          if grep -q "try.*catch\|\.catch" server/database.ts; then
            echo "‚úÖ DATABASE ERROR HANDLING: Present"
          else
            echo "‚ö†Ô∏è DATABASE ERROR HANDLING: Limited error handling detected"
          fi

      - name: üìä Performance & Resource Check
        id: performance-check
        run: |
          echo "‚ö° Analyzing performance characteristics for deployment..."
          
          # Check package.json for large dependencies
          BUNDLE_SIZE_WARNINGS=0
          
          # Check for potentially problematic large dependencies
          LARGE_DEPS=(
            "@google-cloud"
            "firebase"
            "prisma"
          )
          
          echo "üì¶ Checking for large dependencies that might affect cold start:"
          for dep in "${LARGE_DEPS[@]}"; do
            if grep -q "\"$dep" package.json; then
              echo "  ‚ÑπÔ∏è Large dependency detected: $dep (normal for this app type)"
            fi
          done
          
          # Check for proper Cloud Run resource configuration
          WORKFLOW_FILE=".github/workflows/deploy-step7-unified.yml"
          if grep -q "memory.*4Gi" "$WORKFLOW_FILE" && grep -q "cpu.*2" "$WORKFLOW_FILE"; then
            echo "‚úÖ CLOUD RUN CONFIG: Appropriate resource allocation"
            echo "performance_config=optimized" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è CLOUD RUN CONFIG: Resource allocation may need review"
            echo "performance_config=review_needed" >> $GITHUB_OUTPUT
          fi

      - name: üîí Security & Compliance Check
        id: security-check
        run: |
          echo "üîí Checking deployment security patterns..."
          
          SECURITY_SCORE=0
          
          # Check for proper secret handling (more realistic)
          HARDCODED_SECRETS=$(grep -r "password.*=.*['\"][^$]\|api_key.*=.*['\"][^$]\|secret.*=.*['\"][^$]" server/ --include="*.ts" | grep -v "process\.env\|config\." | wc -l || echo "0")
          if [ "$HARDCODED_SECRETS" -eq "0" ]; then
            echo "‚úÖ SECRETS: No obvious hardcoded secrets detected"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          else
            echo "‚ö†Ô∏è SECRETS: $HARDCODED_SECRETS potential hardcoded secrets found"
          fi
          
          # Check for proper authentication patterns (more flexible)
          if find server/routes/ -name "*.ts" -exec grep -q "requireAuth\|authentication\|auth\|token" {} \; 2>/dev/null; then
            echo "‚úÖ AUTHENTICATION: Protection patterns detected"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          fi
          
          # Check for security middleware (including server-step7-unified.js)
          if grep -q "helmet\|cors" server-step7-unified.js server/index.ts 2>/dev/null; then
            echo "‚úÖ SECURITY MIDDLEWARE: Protection middleware detected"
            SECURITY_SCORE=$((SECURITY_SCORE + 1))
          fi
          
          echo "security_score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          
          if [ "$SECURITY_SCORE" -ge "2" ]; then
            echo "security_status=good" >> $GITHUB_OUTPUT
          else
            echo "security_status=review_needed" >> $GITHUB_OUTPUT
          fi

      - name: üìã Generate Deployment Readiness Report
        id: readiness-report
        run: |
          echo "üìä Generating comprehensive deployment readiness report..."
          
          # Calculate overall readiness score
          READINESS_SCORE=0
          MAX_SCORE=7
          
          # Server compilation (critical - worth 2 points)
          if [ "${{ steps.compilation-test.outputs.server_compilation }}" = "success" ]; then
            READINESS_SCORE=$((READINESS_SCORE + 2))
          fi
          
          # Client build (worth 1 point)
          if [ "${{ steps.compilation-test.outputs.client_build }}" = "success" ]; then
            READINESS_SCORE=$((READINESS_SCORE + 1))
          fi
          
          # Critical files (worth 1 point)
          if [ "${{ steps.files-check.outputs.files_status }}" = "complete" ]; then
            READINESS_SCORE=$((READINESS_SCORE + 1))
          fi
          
          # Environment config (worth 1 point)
          if [ "${{ steps.env-check.outputs.env_config }}" = "complete" ]; then
            READINESS_SCORE=$((READINESS_SCORE + 1))
          fi
          
          # Docker build (worth 1 point)
          if [ "${{ steps.docker-test.outputs.docker_status }}" = "success" ]; then
            READINESS_SCORE=$((READINESS_SCORE + 1))
          fi
          
          # Database patterns (worth 1 point)
          if [ "${{ steps.db-patterns.outputs.db_patterns }}" = "cloud_run_ready" ]; then
            READINESS_SCORE=$((READINESS_SCORE + 1))
          fi
          
          echo "readiness_score=$READINESS_SCORE" >> $GITHUB_OUTPUT
          echo "max_score=$MAX_SCORE" >> $GITHUB_OUTPUT
          
          READINESS_PERCENTAGE=$((READINESS_SCORE * 100 / MAX_SCORE))
          echo "readiness_percentage=$READINESS_PERCENTAGE" >> $GITHUB_OUTPUT

      - name: üìä Deployment Readiness Summary
        run: |
          echo ""
          echo "üöÄ DEPLOYMENT READINESS REPORT"
          echo "=============================="
          echo "üóìÔ∏è Analysis Date: $(date)"
          echo "üéØ Commit: ${{ github.sha }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo ""
          echo "üìä READINESS SCORE: ${{ steps.readiness-report.outputs.readiness_score }}/${{ steps.readiness-report.outputs.max_score }} (${{ steps.readiness-report.outputs.readiness_percentage }}%)"
          echo ""
          echo "üîç COMPONENT STATUS:"
          echo "   Server Compilation: ${{ steps.compilation-test.outputs.server_compilation || 'N/A' }}"
          echo "   Client Build: ${{ steps.compilation-test.outputs.client_build || 'N/A' }}"
          echo "   Deployment Files: ${{ steps.files-check.outputs.files_status || 'N/A' }}"
          echo "   Environment Config: ${{ steps.env-check.outputs.env_config || 'N/A' }}"
          echo "   Docker Build: ${{ steps.docker-test.outputs.docker_status || 'N/A' }}"
          echo "   Database Patterns: ${{ steps.db-patterns.outputs.db_patterns || 'N/A' }}"
          echo "   Performance Config: ${{ steps.performance-check.outputs.performance_config || 'N/A' }}"
          echo "   Security Status: ${{ steps.security-check.outputs.security_status || 'N/A' }}"
          echo ""
          
          PERCENTAGE=${{ steps.readiness-report.outputs.readiness_percentage }}
          
          if [ "$PERCENTAGE" -ge "85" ]; then
            echo "üéâ STATUS: DEPLOYMENT READY"
            echo "‚úÖ All critical systems operational"
            echo "‚úÖ High confidence deployment success"
            echo "üöÄ RECOMMENDATION: Proceed with deployment"
          elif [ "$PERCENTAGE" -ge "70" ]; then
            echo "‚ö†Ô∏è STATUS: DEPLOYMENT VIABLE WITH CAUTION"
            echo "üîß Some issues detected but not blocking"
            echo "üìã Review warnings above before deploying"
            echo "üöÄ RECOMMENDATION: Address warnings then deploy"
          else
            echo "‚ùå STATUS: DEPLOYMENT NOT RECOMMENDED"
            echo "üîß Critical issues must be resolved first"
            echo "üìã Check failed components above"
            echo "üöÄ RECOMMENDATION: Fix issues before attempting deployment"
          fi
          echo "=============================="

      - name: üí¨ Comment PR with Readiness Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const score = '${{ steps.readiness-report.outputs.readiness_score }}';
            const maxScore = '${{ steps.readiness-report.outputs.max_score }}';
            const percentage = '${{ steps.readiness-report.outputs.readiness_percentage }}';
            
            let status = 'üöÄ **Deployment Ready!**';
            let recommendation = 'High confidence deployment success';
            let emoji = 'üéâ';
            
            if (percentage >= 85) {
              status = 'üöÄ **Deployment Ready!**';
              recommendation = 'All systems operational - proceed with confidence';
              emoji = 'üéâ';
            } else if (percentage >= 70) {
              status = '‚ö†Ô∏è **Deployment Viable with Caution**';
              recommendation = 'Some issues detected - review before deploying';
              emoji = '‚ö†Ô∏è';
            } else {
              status = '‚ùå **Deployment Not Recommended**';
              recommendation = 'Critical issues must be resolved first';
              emoji = '‚ùå';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ${emoji} **Deployment Readiness Report**
              
              ${status}
              
              üìä **Readiness Score:** ${score}/${maxScore} (${percentage}%)
              
              üîç **Component Status:**
              - Server Compilation: ${{ steps.compilation-test.outputs.server_compilation }}
              - Client Build: ${{ steps.compilation-test.outputs.client_build }}
              - Deployment Files: ${{ steps.files-check.outputs.files_status }}
              - Environment Config: ${{ steps.env-check.outputs.env_config }}
              - Docker Build: ${{ steps.docker-test.outputs.docker_status }}
              - Database Patterns: ${{ steps.db-patterns.outputs.db_patterns }}
              
              üöÄ **Recommendation:** ${recommendation}
              
              ü§ñ *Generated by Deployment Readiness Agent*`
            });

      - name: üö¶ Set Final Exit Status
        run: |
          PERCENTAGE=${{ steps.readiness-report.outputs.readiness_percentage }}
          SERVER_STATUS="${{ steps.compilation-test.outputs.server_compilation }}"
          
          # Critical requirement: Server must compile
          if [ "$SERVER_STATUS" != "success" ]; then
            echo "‚ùå CRITICAL FAILURE: Server compilation failed - deployment impossible"
            exit 1
          fi
          
          # Warning for low readiness but don't fail the workflow
          if [ "$PERCENTAGE" -lt "70" ]; then
            echo "‚ö†Ô∏è WARNING: Deployment readiness below recommended threshold ($PERCENTAGE%)"
            echo "üîß Consider addressing issues before production deployment"
          fi
          
          echo "‚úÖ SUCCESS: Deployment readiness analysis completed"
          exit 0