# INDUSTRY STANDARD: Express Minimal Deployment
# Comprehensive workflow with security, monitoring, and rollback capabilities

name: Deploy Express Minimal (Step 1)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  PROJECT_ID: direct-glider-465821-p7
  PROJECT_NUMBER: 465821
  REGION: us-central1
  SERVICE_NAME: realm-rivalry-express-minimal
  REPOSITORY: realm-rivalry
  IMAGE_NAME: us-central1-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/express-minimal
  MIN_INSTANCES: 1
  MAX_INSTANCES: 3
  MEMORY: 1Gi
  CPU: 1
  TIMEOUT: 60
  CONCURRENCY: 100

jobs:
  pre-deployment-validation:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.prep.outputs.image-tag }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Prepare deployment variables
      id: prep
      run: |
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA="${COMMIT_SHA:0:8}"
        echo "image-tag=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "Image tag: ${SHORT_SHA}"
        
    - name: Validate required files
      run: |
        echo "Validating deployment files..."
        test -f server-express-minimal.js || (echo "‚ùå server-express-minimal.js missing" && exit 1)
        test -f Dockerfile.express-minimal || (echo "‚ùå Dockerfile.express-minimal missing" && exit 1)
        test -f package.json || (echo "‚ùå package.json missing" && exit 1)
        echo "‚úÖ All required files present"

  build-and-push:
    needs: pre-deployment-validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: latest
        
    - name: Configure Docker for Artifact Registry
      run: |
        gcloud auth configure-docker us-central1-docker.pkg.dev
        
    - name: Verify build context
      run: |
        echo "Build context verification:"
        ls -la server-express-minimal.js Dockerfile.express-minimal package.json
        echo "Express server file size: $(wc -c < server-express-minimal.js) bytes"
        
    - name: Build production image with security scanning
      run: |
        echo "Building Express minimal container with multi-stage optimization..."
        
        # Build with build-time optimizations
        docker build \
          -f Dockerfile.express-minimal \
          --target production \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          --tag ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} \
          --tag ${{ env.IMAGE_NAME }}:latest \
          .
          
        echo "Build completed successfully"
        
    - name: Security scan
      run: |
        echo "Running container security validation..."
        
        # Inspect the built image
        docker inspect ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }}
        
        # Verify non-root user
        USER_CHECK=$(docker run --rm ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} whoami)
        if [ "$USER_CHECK" != "nodejs" ]; then
          echo "‚ùå Security check failed: Container not running as nodejs user"
          exit 1
        fi
        echo "‚úÖ Security check passed: Running as non-root user"
        
    - name: Test container functionality
      run: |
        echo "Testing container startup and endpoints..."
        
        # Start container in background
        CONTAINER_ID=$(docker run -d -p 8080:8080 ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }})
        
        # Wait for startup
        sleep 5
        
        # Test health endpoint
        if curl -f http://localhost:8080/healthz; then
          echo "‚úÖ Health check endpoint working"
        else
          echo "‚ùå Health check failed"
          docker logs $CONTAINER_ID
          exit 1
        fi
        
        # Test main endpoint
        if curl -f http://localhost:8080/health | grep -q "Express minimal server"; then
          echo "‚úÖ Main endpoint working"
        else
          echo "‚ùå Main endpoint failed"
          docker logs $CONTAINER_ID
          exit 1
        fi
        
        # Cleanup
        docker stop $CONTAINER_ID
        echo "‚úÖ Container functionality verified"
        
    - name: Push to Artifact Registry
      run: |
        echo "Pushing Express minimal image to registry..."
        docker push ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }}
        docker push ${{ env.IMAGE_NAME }}:latest
        echo "‚úÖ Images pushed successfully"

  deploy-to-cloud-run:
    needs: [pre-deployment-validation, build-and-push]
    runs-on: ubuntu-latest
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        version: latest
        
    - name: Deploy to Cloud Run with Blue-Green strategy
      run: |
        echo "Deploying Express minimal service with industry-standard configuration..."
        
        REVISION_SUFFIX="${{ needs.pre-deployment-validation.outputs.image-tag }}"
        
        # Check if service exists
        if gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --quiet 2>/dev/null; then
          echo "üì¶ Updating existing service with Blue-Green deployment"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=${{ env.MEMORY }} \
            --cpu=${{ env.CPU }} \
            --timeout=${{ env.TIMEOUT }} \
            --concurrency=${{ env.CONCURRENCY }} \
            --min-instances=${{ env.MIN_INSTANCES }} \
            --max-instances=${{ env.MAX_INSTANCES }} \
            --port=8080 \
            --execution-environment=gen2 \
            --cpu-boost \
            --revision-suffix="${REVISION_SUFFIX}" \
            --tag="latest" \
            --no-traffic
        else
          echo "üÜï Creating new service"
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=${{ env.MEMORY }} \
            --cpu=${{ env.CPU }} \
            --timeout=${{ env.TIMEOUT }} \
            --concurrency=${{ env.CONCURRENCY }} \
            --min-instances=${{ env.MIN_INSTANCES }} \
            --max-instances=${{ env.MAX_INSTANCES }} \
            --port=8080 \
            --execution-environment=gen2 \
            --cpu-boost \
            --revision-suffix="${REVISION_SUFFIX}"
        fi
          
        echo "‚úÖ Service deployment completed"
        
    - name: Health check verification
      run: |
        echo "Verifying service health..."
        
        # Get the service URL for the new revision
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
          
        REVISION_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.traffic[0].url)')
          
        echo "Service URL: $SERVICE_URL"
        echo "Revision URL: $REVISION_URL"
        
        # Test health endpoints
        if curl -f "${SERVICE_URL}/healthz"; then
          echo "‚úÖ Health check endpoint working"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi
        
        if curl -f "${SERVICE_URL}/health" | grep -q "Express minimal server"; then
          echo "‚úÖ Full health endpoint working"
        else
          echo "‚ùå Full health endpoint failed"
          exit 1
        fi
        
    - name: Switch traffic to new revision
      run: |
        echo "Switching 100% traffic to new revision..."
        
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-latest
          
        echo "‚úÖ Traffic switched to new revision"
        
    - name: Final verification
      run: |
        echo "Final deployment verification..."
        
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format='value(status.url)')
          
        echo "üåê Express Minimal Server deployed successfully!"
        echo "üîó Service URL: $SERVICE_URL"
        echo "üè• Health check: $SERVICE_URL/health"
        echo "‚ö° Quick health: $SERVICE_URL/healthz"
        
        # Final health verification
        curl -f "$SERVICE_URL/health"
        
        echo ""
        echo "‚úÖ STEP 1 COMPLETE: Express framework works on Cloud Run"
        echo "üéØ Next: Test Express + Database (Step 2)"