name: Blue-Green Deploy (Zero-Downtime)

on:
  workflow_dispatch:
    inputs:
      confirm_blue_green:
        description: 'Confirm Blue-Green deployment strategy'
        required: true
        default: 'yes'
        type: choice
        options:
        - yes
        - no
  push:
    branches: [ main ]
    # Removed paths-ignore to ensure all changes trigger deployment

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  SERVICE_NAME: realm-rivalry-backend
  IMAGE_NAME: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  blue-green-deploy:
    runs-on: ubuntu-latest
    # Skip deployment for Dependabot PRs to prevent build failures
    if: github.actor != 'dependabot[bot]'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    # CRITICAL IAM FIX: Skip IAM policy binding - permissions must be configured in GCP Console
    - name: Verify IAM permissions prerequisites
      run: |
        echo "🔐 CRITICAL: Verifying IAM permissions are configured"
        echo "⚠️  IMPORTANT: Cloud Run service account must have 'Secret Manager Secret Accessor' role"
        echo "📋 Required secrets: database-url, firebase-api-key, firebase-project-id, firebase-app-id, google-client-id, google-client-secret"
        echo "🔧 Configure in GCP Console: IAM & Admin → IAM → Add Cloud Run service account → Grant 'Secret Manager Secret Accessor' role"
        echo "✅ Proceeding with deployment assuming IAM permissions are correctly configured"

    # STEP 1: Build with immutable tag (commit SHA)
    - name: Build Green revision with immutable tag
      run: |
        echo "🔨 STEP 1: Building Green revision with immutable tag"
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA="${COMMIT_SHA:0:8}"
        echo "Using immutable tag: $SHORT_SHA"
        
        docker build \
          --no-cache \
          --platform linux/amd64 \
          -f Dockerfile.backend \
          -t ${{ env.IMAGE_NAME }}:$SHORT_SHA \
          .
        
        docker push ${{ env.IMAGE_NAME }}:$SHORT_SHA
        echo "✅ Green revision built and pushed: $SHORT_SHA"

    # STEP 2: Deploy Green revision with NO traffic
    - name: Deploy Green revision (0% traffic)
      run: |
        echo "🚀 STEP 2: Deploying Green revision with 0% traffic"
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA="${COMMIT_SHA:0:8}"
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:$SHORT_SHA \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --no-traffic \
          --tag green-$SHORT_SHA \
          --set-env-vars NODE_ENV=production,DEPLOY_TIMESTAMP=$(date +%s),GOOGLE_CLOUD_PROJECT=direct-glider-465821-p7 \
          --set-secrets DATABASE_URL=database-url:latest,VITE_FIREBASE_API_KEY=firebase-api-key:latest,VITE_FIREBASE_PROJECT_ID=firebase-project-id:latest,VITE_FIREBASE_APP_ID=firebase-app-id:latest,GOOGLE_CLIENT_ID=google-client-id:latest,GOOGLE_CLIENT_SECRET=google-client-secret:latest \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --max-instances 10 \
          --min-instances 0 \
          --timeout 300s \
          --startup-probe httpGet.path=/healthz,initialDelaySeconds=15,timeoutSeconds=3,failureThreshold=15,periodSeconds=5
        
        echo "✅ Green revision deployed with 0% traffic"

    # STEP 3: Wait for startup probe success
    - name: Wait for Green revision health check
      run: |
        echo "🔍 STEP 3: Waiting for Green revision to pass startup probes"
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA="${COMMIT_SHA:0:8}"
        GREEN_REVISION="green-$SHORT_SHA"
        
        # Wait up to 5 minutes for the revision to become ready with enhanced debugging
        echo "Waiting for Green revision to become healthy..."
        timeout 300 bash -c '
          while true; do
            STATUS=$(gcloud run revisions describe '$GREEN_REVISION' --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.conditions[0].status)" 2>/dev/null || echo "Unknown")
            if [ "$STATUS" = "True" ]; then
              echo "✅ Green revision is healthy and ready"
              break
            fi
            echo "Waiting for Green revision... Status: $STATUS"
            
            # Get detailed failure information
            echo "🔍 Checking revision details:"
            gcloud run revisions describe '$GREEN_REVISION' --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.conditions[0].message)" 2>/dev/null || echo "No message available"
            
            # Check container logs for debugging
            echo "📋 Recent container logs:"
            gcloud logs read --limit=10 --filter="resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.SERVICE_NAME }} AND resource.labels.revision_name='$GREEN_REVISION'" --format="value(textPayload)" 2>/dev/null | head -5 || echo "No logs available yet"
            
            sleep 10
          done
        ' || {
          echo "❌ Green revision failed to become healthy within timeout"
          echo "📋 Final container logs:"
          gcloud logs read --limit=20 --filter="resource.type=cloud_run_revision AND resource.labels.service_name=${{ env.SERVICE_NAME }} AND resource.labels.revision_name=$GREEN_REVISION" --format="value(textPayload)" 2>/dev/null || echo "No logs available"
          exit 1
        }

    # STEP 4: Test Green revision
    - name: Test Green revision
      run: |
        echo "🧪 STEP 4: Testing Green revision before traffic promotion"
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA="${COMMIT_SHA:0:8}"
        GREEN_REVISION="green-$SHORT_SHA"
        
        # Get the Green revision URL
        GREEN_URL=$(gcloud run revisions describe $GREEN_REVISION --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "Green revision URL: $GREEN_URL"
        
        # Test health endpoints
        echo "Testing /health endpoint..."
        curl -f "$GREEN_URL/health" || exit 1
        
        echo "Testing /healthz endpoint..."
        curl -f "$GREEN_URL/healthz" || exit 1
        
        echo "Testing API endpoint..."
        curl -f "$GREEN_URL/api/deployment-verification" || exit 1
        
        echo "✅ Green revision passed all tests"

    # STEP 5: Atomic traffic promotion
    - name: Promote Green to Blue (100% traffic)
      run: |
        echo "🔄 STEP 5: Promoting Green revision to receive 100% traffic"
        COMMIT_SHA="${{ github.sha }}"
        SHORT_SHA="${COMMIT_SHA:0:8}"
        GREEN_REVISION="green-$SHORT_SHA"
        
        # Atomic traffic switch
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=$GREEN_REVISION=100
        
        echo "✅ Traffic successfully switched to Green revision"
        echo "Green revision is now Blue (production)"

    # STEP 6: Verify production deployment
    - name: Verify production deployment
      run: |
        echo "✅ STEP 6: Verifying production deployment"
        
        # Get production URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Production URL: $SERVICE_URL"
        
        # Test production endpoints
        echo "Testing production health..."
        curl -f "$SERVICE_URL/health" | jq '.status' || exit 1
        
        echo "Testing production API..."
        curl -f "$SERVICE_URL/api/deployment-verification" | jq '.deploymentStatus' || exit 1
        
        echo "🎉 Blue-Green deployment completed successfully!"
        echo "✅ Zero-downtime deployment with full health verification"

    # EMERGENCY ROLLBACK (manual trigger only)
    - name: Prepare rollback information
      if: always()
      run: |
        echo "📋 ROLLBACK INFORMATION:"
        echo "If issues occur, use this command to rollback:"
        echo ""
        
        # Get previous revision (second most recent)
        PREVIOUS_REVISION=$(gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(REVISION)' --sort-by='~creationTimestamp' --limit=2 | tail -n1)
        
        if [ -n "$PREVIOUS_REVISION" ]; then
          echo "gcloud run services update-traffic ${{ env.SERVICE_NAME }} \\"
          echo "  --region=${{ env.REGION }} \\"
          echo "  --to-revisions=$PREVIOUS_REVISION=100"
          echo ""
          echo "Previous stable revision: $PREVIOUS_REVISION"
        else
          echo "No previous revision found for rollback"
        fi
        
        echo "Current deployment commit: ${{ github.sha }}"