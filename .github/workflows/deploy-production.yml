name: Deploy Production (Blue-Green Strategy)

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Choose deployment type'
        required: true
        default: 'simple'
        type: choice
        options:
        - simple
        - full
  # push:
  #   branches: [ main ]  # DISABLED - Using blue-green-deploy.yml as primary

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  SERVICE_NAME: realm-rivalry-backend
  IMAGE_NAME: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Verify latest code and build context
      run: |
        echo "üîç VERIFYING DEPLOYMENT USES LATEST CODE AND BUILD CONTEXT"
        echo "Current commit: $(git rev-parse HEAD)"
        echo "Latest commit message: $(git log -1 --pretty=format:'%s')"
        echo "Git status check:"
        git status --porcelain || echo "No uncommitted changes"
        echo ""
        echo "üîç DOCKERFILE VERIFICATION:"
        grep -A 3 "Copy source code" Dockerfile.backend || echo "‚ö†Ô∏è Dockerfile pattern not found"
        echo ""
        echo "üîç BUILD CONTEXT SOURCE CODE VERIFICATION:"
        echo "Health endpoint actual content:"
        grep -A 5 -B 5 "environment:" server/health.ts || echo "‚ö†Ô∏è Environment object not found in build context"
        echo ""
        echo "CORS configuration actual content:"  
        grep -A 10 -B 2 "COMPREHENSIVE CORS" server/index.ts || echo "‚ö†Ô∏è CORS config not found in build context"
        echo ""
        echo "üîç FILE INTEGRITY CHECK:"
        echo "server/health.ts last modified: $(stat -c %y server/health.ts)"
        echo "server/index.ts last modified: $(stat -c %y server/index.ts)"
        echo ""
        echo "‚úÖ Build context verification complete"

    - name: Ensure latest Git state
      run: |
        echo "üîÑ ENSURING LATEST GIT STATE FOR BUILD CONTEXT"
        git fetch origin main
        git reset --hard origin/main
        echo "Git head after reset: $(git rev-parse HEAD)"
        echo "Working directory clean: $(git status --porcelain | wc -l) uncommitted files"
        
    - name: Final build context verification
      run: |
        echo "üîç FINAL BUILD CONTEXT VERIFICATION BEFORE DOCKER BUILD"
        echo "Environment object in server/health.ts:"
        grep -n "environment:" server/health.ts || echo "‚ùå CRITICAL: Environment object missing"
        echo ""
        echo "CORS config in server/index.ts:"
        grep -n "COMPREHENSIVE CORS" server/index.ts || echo "‚ùå CRITICAL: CORS config missing"
        echo ""
        if grep -q "environment:" server/health.ts && grep -q "COMPREHENSIVE CORS" server/index.ts; then
          echo "‚úÖ Build context contains latest source code"
        else
          echo "‚ùå CRITICAL ERROR: Build context missing latest changes"
          echo "This deployment will fail - stopping here"
          exit 1
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    - name: Build production image
      run: |
        echo "Building production image with FIXED Dockerfile.backend..."
        echo "üî• FORCE NO-CACHE BUILD to ensure latest code is used"
        # Use commit SHA as tag to prevent caching issues
        IMAGE_TAG="${{ github.sha }}"
        echo "Using unique image tag: $IMAGE_TAG"
        docker build \
          --no-cache \
          --platform linux/amd64 \
          -f Dockerfile.backend \
          -t ${{ env.IMAGE_NAME }}:$IMAGE_TAG \
          -t ${{ env.IMAGE_NAME }}:latest .

    - name: Push image to registry
      run: |
        IMAGE_TAG="${{ github.sha }}"
        echo "Pushing both tagged and latest images"
        docker push ${{ env.IMAGE_NAME }}:$IMAGE_TAG
        docker push ${{ env.IMAGE_NAME }}:latest

    # BLUE-GREEN DEPLOYMENT: Deploy Green revision with 0% traffic
    - name: Deploy Green revision (0% traffic)
      run: |
        echo "üöÄ BLUE-GREEN STEP 1: Deploying Green revision with 0% traffic"
        IMAGE_TAG="${{ github.sha }}"
        DEPLOY_TIMESTAMP=$(date +%s)
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:$IMAGE_TAG \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --no-traffic \
          --tag green-$IMAGE_TAG \
          --set-env-vars NODE_ENV=production,DEPLOY_TIMESTAMP=$DEPLOY_TIMESTAMP,GOOGLE_CLOUD_PROJECT=direct-glider-465821-p7 \
          --set-secrets DATABASE_URL_PRODUCTION=database-url:latest,VITE_FIREBASE_API_KEY=firebase-api-key:latest,VITE_FIREBASE_PROJECT_ID=firebase-project-id:latest,VITE_FIREBASE_APP_ID=firebase-app-id:latest,GOOGLE_CLIENT_ID=google-client-id:latest,GOOGLE_CLIENT_SECRET=google-client-secret:latest \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --max-instances 10 \
          --min-instances 0 \
          --port 8080 \
          --timeout 300s \
          --startup-probe httpGet.path=/healthz,httpGet.port=8080,initialDelaySeconds=10,timeoutSeconds=3,failureThreshold=8,periodSeconds=5
        
        echo "‚úÖ Green revision deployed with 0% traffic"

    # Wait for Green revision to become healthy
    - name: Wait for Green revision health check
      run: |
        echo "üîç BLUE-GREEN STEP 2: Waiting for Green revision to pass startup probes"
        IMAGE_TAG="${{ github.sha }}"
        GREEN_REVISION="green-$IMAGE_TAG"
        
        timeout 180 bash -c "
          while true; do
            STATUS=\$(gcloud run revisions describe \$GREEN_REVISION --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.conditions[0].status)' 2>/dev/null || echo 'Unknown')
            if [ \"\$STATUS\" = \"True\" ]; then
              echo \"‚úÖ Green revision is healthy and ready\"
              break
            fi
            echo \"Waiting for Green revision... Status: \$STATUS\"
            sleep 10
          done
        " || {
          echo "‚ùå Green revision failed to become healthy within timeout"
          exit 1
        }

    # Test Green revision before promoting
    - name: Test Green revision
      run: |
        echo "üß™ BLUE-GREEN STEP 3: Testing Green revision before traffic promotion"
        IMAGE_TAG="${{ github.sha }}"
        GREEN_REVISION="green-$IMAGE_TAG"
        
        GREEN_URL=$(gcloud run revisions describe $GREEN_REVISION --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "Testing Green revision at: $GREEN_URL"
        
        # Test health endpoints
        curl -f "$GREEN_URL/health" || exit 1
        curl -f "$GREEN_URL/healthz" || exit 1
        curl -f "$GREEN_URL/api/deployment-verification" || exit 1
        
        echo "‚úÖ Green revision passed all tests"

    # Promote Green to production (Blue)
    - name: Promote Green to production
      run: |
        echo "üîÑ BLUE-GREEN STEP 4: Promoting Green revision to receive 100% traffic"
        IMAGE_TAG="${{ github.sha }}"
        GREEN_REVISION="green-$IMAGE_TAG"
        
        gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --to-revisions=$GREEN_REVISION=100
        
        echo "‚úÖ Traffic successfully switched - Green is now Blue (production)"

    - name: Prepare rollback information
      run: |
        echo "üìã EMERGENCY ROLLBACK INFORMATION:"
        echo "If issues occur, use this command to rollback:"
        
        PREVIOUS_REVISION=$(gcloud run revisions list --service=${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(REVISION)' --sort-by='~creationTimestamp' --limit=1 --skip=1)
        
        if [ -n "$PREVIOUS_REVISION" ]; then
          echo "gcloud run services update-traffic ${{ env.SERVICE_NAME }} \\"
          echo "  --region=${{ env.REGION }} \\"
          echo "  --to-revisions=$PREVIOUS_REVISION=100"
          echo ""
          echo "Or run: ./scripts/emergency-rollback.sh"
        fi

    - name: Verify deployment
      run: |
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Service URL: $SERVICE_URL"
        
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/health" || (echo "Health check failed" && exit 1)
        
        echo "üîç VERIFYING ENHANCED DEBUGGING DEPLOYED:"
        echo "Testing deployment verification endpoint..."
        curl -s "$SERVICE_URL/api/deployment-verification" | jq '.deploymentStatus' || echo "‚ö†Ô∏è Deployment verification endpoint missing"
        
        echo "Testing enhanced health endpoint version..."
        curl -s "$SERVICE_URL/health" | jq '.version' || echo "‚ö†Ô∏è Version missing"
        
        echo "Testing CORS headers..."
        curl -H "Origin: https://www.realmrivalry.com" -D - "$SERVICE_URL/health" | grep -i access-control || echo "‚ö†Ô∏è CORS headers missing"
        
        echo "üéâ Blue-Green deployment completed successfully!"
        echo "‚úÖ Zero-downtime deployment with full health verification"
        echo "Backend available at: $SERVICE_URL"
        echo "Note: Frontend deployed separately via 'Frontend Only - Firebase Deploy' workflow"