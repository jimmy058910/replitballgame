name: Deploy Production (Industry Standard)

on:
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Choose deployment type'
        required: true
        default: 'simple'
        type: choice
        options:
        - simple
        - full
  push:
    branches: [ main ]

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  SERVICE_NAME: realm-rivalry-backend
  IMAGE_NAME: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    - name: Build production image
      run: |
        echo "Building production image with FIXED Dockerfile.backend..."
        docker build \
          --platform linux/amd64 \
          -f Dockerfile.backend \
          -t ${{ env.IMAGE_NAME }}:latest .

    - name: Push image to registry
      run: docker push ${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run with industry standard configuration..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production \
          --set-secrets DATABASE_URL_PRODUCTION=database-url-production:latest,VITE_FIREBASE_API_KEY=firebase-api-key:latest,VITE_FIREBASE_PROJECT_ID=firebase-project-id:latest,VITE_FIREBASE_APP_ID=firebase-app-id:latest \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 80 \
          --max-instances 10 \
          --min-instances 1 \
          --port 8080 \
          --timeout 300s \
          --cpu-boost

    - name: Verify deployment
      run: |
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Service URL: $SERVICE_URL"
        
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/health" || (echo "Health check failed" && exit 1)
        
        echo "âœ… Backend deployment successful!"
        echo "Backend available at: $SERVICE_URL"
        echo "Note: Frontend deployed separately via 'Frontend Only - Firebase Deploy' workflow"