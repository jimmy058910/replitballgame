name: Deploy Simple Database Server

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean
  # DISABLED: Auto-trigger disabled - use Step 7 unified deployment instead
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'server-database-dual.js'
  #     - '.github/workflows/deploy-simple-database.yml'

jobs:
  pre-deployment-validation:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.generate-tag.outputs.tag }}
    steps:
      - name: Generate deployment tag
        id: generate-tag
        run: |
          TAG=$(echo "${GITHUB_SHA::8}")
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

  deploy-to-cloud-run:
    needs: pre-deployment-validation
    runs-on: ubuntu-latest
    environment: production
    env:
      PROJECT_ID: direct-glider-465821-p7
      PROJECT_NUMBER: 465821
      REGION: us-central1
      SERVICE_NAME: realm-rivalry-simple-database
      REPOSITORY: realm-rivalry
      IMAGE_NAME: us-central1-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/simple-database
      MIN_INSTANCES: 1
      MAX_INSTANCES: 3
      MEMORY: 1Gi
      CPU: 1
      TIMEOUT: 60
      CONCURRENCY: 100

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and push Docker image
        run: |
          echo "Building simple database server image..."
          echo "✅ Using server-database-dual.js (clean, no Neon references)"
          
          # Create build context with our actual dual-mode server
          mkdir -p build-context
          cp server-database-dual.js build-context/server.js
          cd build-context
          
          # Create package.json with minimal dependencies
          cat > package.json << 'PACKAGE_EOF'
          {
            "name": "simple-database-server",
            "version": "1.0.0",
            "type": "module",
            "dependencies": {
              "express": "^4.19.2",
              "pg": "^8.11.3"
            },
            "engines": {
              "node": ">=20.0.0"
            }
          }
          PACKAGE_EOF
          
          # Create optimized Dockerfile
          cat > Dockerfile << 'DOCKER_EOF'
          FROM node:20-alpine
          
          WORKDIR /app
          
          # Copy package.json and install dependencies
          COPY package.json .
          RUN npm install --production
          
          # Copy server file
          COPY server.js .
          
          # Expose port 8080 for Cloud Run
          EXPOSE 8080
          
          # Start the dual-mode server
          CMD ["node", "server.js"]
          DOCKER_EOF
          
          echo "✅ Build context ready with server-database-dual.js"
          
          # Build and push the Docker image
          docker build -t ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} .
          docker push ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }}

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying simple database server..."

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=${{ env.MEMORY }} \
            --cpu=${{ env.CPU }} \
            --timeout=${{ env.TIMEOUT }} \
            --concurrency=${{ env.CONCURRENCY }} \
            --min-instances=${{ env.MIN_INSTANCES }} \
            --max-instances=${{ env.MAX_INSTANCES }} \
            --port=8080 \
            --execution-environment=gen2 \
            --cpu-boost \
            --add-cloudsql-instances=direct-glider-465821-p7:us-central1:realm-rivalry-prod \
            --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
            --set-env-vars="NODE_ENV=production"

          echo "✅ Deployment completed successfully"