name: Deploy Authentication Server (Step 3)

on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  PROJECT_ID: direct-glider-465821-p7
  PROJECT_NUMBER: 465821
  REGION: us-central1
  SERVICE_NAME: realm-rivalry-auth-server
  REPOSITORY: realm-rivalry
  IMAGE_NAME: us-central1-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/auth-server
  MIN_INSTANCES: 1
  MAX_INSTANCES: 3
  MEMORY: 1Gi
  CPU: 1
  TIMEOUT: 60
  CONCURRENCY: 100

jobs:
  pre-deployment-validation:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
      image-tag: ${{ steps.validation.outputs.image-tag }}
    steps:
      - name: Validate deployment readiness
        id: validation
        run: |
          echo "🔍 Step 3: Pre-deployment validation"
          echo "✅ Authentication server deployment starting"
          
          # Generate unique image tag
          IMAGE_TAG=$(echo $GITHUB_SHA | head -c8)
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          
          echo "✅ Validation complete - proceeding with Step 3 deployment"

  deploy-to-cloud-run:
    needs: pre-deployment-validation
    if: needs.pre-deployment-validation.outputs.should-deploy == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Build and Push Step 3 Authentication Server
        run: |
          echo "Building Step 3: Express + Database + Authentication server..."
          echo "✅ Using server-database-auth.js (with Google OAuth)"
          
          # Create build context with our Step 3 server
          mkdir -p build-context
          cp server-database-auth.js build-context/server.js
          cd build-context
          
          # Create package.json with authentication dependencies
          cat > package.json << 'PACKAGE_EOF'
          {
            "name": "auth-server",
            "version": "1.0.0",
            "type": "module",
            "dependencies": {
              "express": "^4.19.2",
              "firebase-admin": "^12.0.0",
              "pg": "^8.11.3"
            },
            "engines": {
              "node": ">=20.0.0"
            }
          }
          PACKAGE_EOF
          
          # Create optimized Dockerfile for authentication
          cat > Dockerfile << 'DOCKER_EOF'
          FROM node:20-alpine
          
          WORKDIR /app
          
          # Copy package.json and install dependencies
          COPY package.json .
          RUN npm install --production
          
          # Copy server file
          COPY server.js .
          
          # Expose port 8080 for Cloud Run
          EXPOSE 8080
          
          # Start the authentication server
          CMD ["node", "server.js"]
          DOCKER_EOF
          
          echo "✅ Build context ready with Step 3 authentication server"
          
          # Build and push the Docker image
          docker build -t ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} .
          docker push ${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }}

      - name: Deploy to Cloud Run
        run: |
          echo "Deploying Step 3: Authentication server..."

          # Create env vars file to handle special characters properly
          cat > env_vars.yaml << 'ENV_EOF'
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          NODE_ENV: production
          ENV_EOF
          
          # Add GOOGLE_SERVICE_ACCOUNT_KEY as base64 to avoid parsing issues
          echo "GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}" >> env_vars.yaml

          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }}:${{ needs.pre-deployment-validation.outputs.image-tag }} \
            --region=${{ env.REGION }} \
            --platform=managed \
            --allow-unauthenticated \
            --memory=${{ env.MEMORY }} \
            --cpu=${{ env.CPU }} \
            --timeout=${{ env.TIMEOUT }} \
            --concurrency=${{ env.CONCURRENCY }} \
            --min-instances=${{ env.MIN_INSTANCES }} \
            --max-instances=${{ env.MAX_INSTANCES }} \
            --port=8080 \
            --execution-environment=gen2 \
            --cpu-boost \
            --add-cloudsql-instances=direct-glider-465821-p7:us-central1:realm-rivalry-prod \
            --env-vars-file=env_vars.yaml

          echo "✅ Step 3 deployment completed successfully"