# .github/workflows/review.yml
# This workflow runs automated QA checks on pull requests and weekly dependency scans.

name: Automated QA Pipeline

on:
  pull_request:
    types: [opened, synchronize, reopened]
  schedule:
    # Weekly proactive dependency scan - Monday 2AM UTC
    - cron: "0 2 * * 1"
  workflow_dispatch: # Allow manual triggering

# These permissions are required for the workflow to function correctly.
permissions:
  contents: read          # To check out the code
  pull-requests: write   # For the AI reviewer to post comments on the PR
  security-events: write # For Snyk to upload its findings to the Security tab
  issues: write          # For creating weekly vulnerability notifications

jobs:
  virtual-qa-team:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for a more accurate analysis

      # Step 2: Set up the Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # --- Software Composition Analysis (SCA) ---
      - name: Install Snyk CLI
        run: npm install -g snyk

      - name: Run Snyk SCA Scan
        # Runs the Snyk test and outputs results to a SARIF file.
        # The "|| true" ensures the workflow continues even if vulnerabilities are found,
        # so the AI review can still run.
        # Note: Removed --all-projects to avoid multiple SARIF runs in same category
        # (GitHub policy change July 2025)
        run: |
          # Fix package-lock sync issue first
          npm ci --omit=dev --no-audit --quiet || echo "npm ci completed with warnings"
          snyk test --sarif-file-output=snyk.sarif || echo "Snyk scan completed with findings"
        env:
          # Use the secret token you created in Step 1
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        # Skip Snyk scan for Dependabot PRs if token is unavailable
        if: ${{ env.SNYK_TOKEN != '' }}
        continue-on-error: true

      - name: Upload Snyk Scan Results to GitHub
        # This step takes the SARIF file from Snyk and uploads it to the
        # GitHub Security tab for easy viewing.
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif
          category: snyk-security-scan  # Explicit category to avoid conflicts
          # Only upload if Snyk scan ran and created the file
        if: ${{ hashFiles('snyk.sarif') != '' }}

      # --- AI Peer Review ---
      - name: AI Code Review
        uses: AleksandrFurmenkovOfficial/ai-code-review@v0.9
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          owner: ${{ github.repository_owner }}
          repo: ${{ github.event.repository.name }}
          pr_number: ${{ github.event.pull_request.number }}
          ai_provider: 'google'
          google_api_key: ${{ secrets.GOOGLE_API_KEY }}
          # Use Gemini 1.5 Flash - it's fast, powerful, and cost-effective for this task.
          google_model: 'gemini-1.5-flash'
          # Exclude compiled code and dependencies from the review.
          exclude_paths: 'dist/,node_modules/'
        # Only run AI review on pull requests AND if API key is available
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        timeout-minutes: 10

      # --- Weekly Scan Notifications ---
      - name: Create Issue for Weekly Vulnerabilities
        uses: actions/github-script@v7
        if: ${{ github.event_name == 'schedule' && hashFiles('snyk.sarif') != '' }}
        with:
          script: |
            // Read and parse SARIF file to check for vulnerabilities
            const fs = require('fs');
            
            try {
              const sarifContent = fs.readFileSync('snyk.sarif', 'utf8');
              const sarif = JSON.parse(sarifContent);
              
              const results = sarif.runs?.[0]?.results || [];
              const highSeverity = results.filter(r => r.level === 'error').length;
              const mediumSeverity = results.filter(r => r.level === 'warning').length;
              const total = results.length;
              
              if (total > 0) {
                const title = `ðŸš¨ Weekly Security Scan: ${total} vulnerabilities found`;
                const body = `## Weekly Dependency Security Scan Results
            
            **Scan Date:** ${new Date().toISOString().split('T')[0]}
            
            ### Summary
            - **High Severity:** ${highSeverity}
            - **Medium Severity:** ${mediumSeverity}  
            - **Total Issues:** ${total}
            
            ### Action Required
            Review the [Security tab](${context.payload.repository.html_url}/security/code-scanning) for detailed findings and remediation steps.
            
            ### Automated Scan Details
            This issue was automatically created by the weekly dependency scan. 
            Check the latest workflow run for full SARIF results.
            `;
            
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: title,
                  body: body,
                  labels: ['security', 'dependencies', 'automated']
                });
              }
            } catch (error) {
              console.log('No vulnerabilities found or SARIF parsing error:', error.message);
            }