name: Deploy Step 6 API Routes to Cloud Run

on:
  workflow_dispatch:
    inputs:
      deployment_note:
        description: 'Deployment note for tracking'
        required: false
        default: 'Step 6 Enhanced API Routes with Real Database'

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-central1
  SERVICE_NAME: realm-rivalry-api-routes
  IMAGE_NAME: realm-rivalry-api-routes

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
        project_id: ${{ env.PROJECT_ID }}
        export_default_credentials: true

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker us-central1-docker.pkg.dev

    - name: Build Step 6 API Routes Docker image
      run: |
        cat > Dockerfile.step6-api-routes << 'EOF'
        # Multi-stage build for Step 6 Enhanced API Routes
        FROM node:20-slim AS base

        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            openssl \
            ca-certificates \
            && rm -rf /var/lib/apt/lists/* \
            && apt-get clean

        WORKDIR /app

        # Copy package files
        COPY package*.json ./
        COPY prisma ./prisma/

        # Install dependencies
        RUN npm ci --only=production && npm cache clean --force

        # Generate Prisma client
        RUN npx prisma generate

        # Copy application files
        COPY server-step6-api-routes.js ./
        COPY shared ./shared/
        COPY server/storage ./server/storage/
        COPY server/db.js ./server/
        COPY .env* ./

        # Create production build directory structure
        RUN mkdir -p dist/public

        # Ensure proper file permissions
        RUN chmod +x server-step6-api-routes.js

        # Health check
        HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
          CMD curl -f http://localhost:8080/health || exit 1

        # Expose port
        EXPOSE 8080

        # Set environment
        ENV NODE_ENV=production
        ENV PORT=8080

        # Start application
        CMD ["node", "server-step6-api-routes.js"]
        EOF

    - name: Build and push Docker image
      run: |
        IMAGE_URI="us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/realm-rivalry/${{ env.IMAGE_NAME }}:latest"
        
        echo "Building Docker image: $IMAGE_URI"
        docker build -f Dockerfile.step6-api-routes -t $IMAGE_URI .
        
        echo "Pushing Docker image to Artifact Registry"
        docker push $IMAGE_URI

    - name: Deploy to Cloud Run
      run: |
        echo "Deploying Step 6 API Routes to Cloud Run..."
        
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image us-central1-docker.pkg.dev/${{ env.PROJECT_ID }}/realm-rivalry/${{ env.IMAGE_NAME }}:latest \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --concurrency 100 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars NODE_ENV=production \
          --set-env-vars DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --set-env-vars SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
          --set-env-vars GOOGLE_SERVICE_ACCOUNT_KEY_BASE64="${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY_BASE64 }}" \
          --add-cloudsql-instances ${{ env.PROJECT_ID }}:${{ env.REGION }}:realm-rivalry-dev \
          --service-account realm-rivalry-service@${{ env.PROJECT_ID }}.iam.gserviceaccount.com

    - name: Get service URL
      id: url
      run: |
        URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format='value(status.url)')
        echo "SERVICE_URL=$URL" >> $GITHUB_OUTPUT
        echo "Service deployed at: $URL"

    - name: Comprehensive Health Check Verification
      run: |
        SERVICE_URL="${{ steps.url.outputs.SERVICE_URL }}"
        echo "Performing comprehensive health checks on: $SERVICE_URL"
        
        # Wait for deployment to stabilize
        echo "Waiting 30 seconds for deployment to stabilize..."
        sleep 30
        
        # Test health endpoint
        echo "Testing health endpoint..."
        HEALTH_RESPONSE=$(curl -s -w "%{http_code}" "${SERVICE_URL}/health" -H "Accept: application/json" --max-time 15)
        HTTP_CODE="${HEALTH_RESPONSE: -3}"
        RESPONSE_BODY="${HEALTH_RESPONSE%???}"
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "‚ùå Health check failed with HTTP $HTTP_CODE"
          echo "Response: $RESPONSE_BODY"
          exit 1
        fi
        
        echo "‚úÖ Health check passed (HTTP $HTTP_CODE)"
        echo "Response: $RESPONSE_BODY"
        
        # Test API endpoints
        echo "Testing Divisions API endpoint..."
        DIVISIONS_RESPONSE=$(curl -s "${SERVICE_URL}/api/divisions" -H "Accept: application/json" --max-time 15)
        echo "Divisions API response preview: $(echo "$DIVISIONS_RESPONSE" | head -c 200)..."
        
        echo "Testing Statistics API endpoint..."  
        STATS_RESPONSE=$(curl -s "${SERVICE_URL}/api/stats/overview" -H "Accept: application/json" --max-time 15)
        echo "Statistics API response preview: $(echo "$STATS_RESPONSE" | head -c 200)..."
        
        echo "‚úÖ All API endpoints responding correctly"
        echo "üöÄ Step 6 Enhanced API Routes deployment completed successfully!"
        echo "üåê Service URL: $SERVICE_URL"