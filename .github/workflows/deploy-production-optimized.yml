name: Deploy Production Optimized Backend

on:
  workflow_dispatch:

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  BACKEND_SERVICE: realm-rivalry-backend
  BACKEND_IMAGE: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  deploy-optimized:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    - name: Build optimized image
      run: |
        echo "Building production-optimized image using existing Dockerfile.backend..."
        docker build -f Dockerfile.backend -t ${{ env.BACKEND_IMAGE }}:optimized .

    - name: Push optimized image
      run: |
        docker push ${{ env.BACKEND_IMAGE }}:optimized

    - name: Deploy optimized backend
      run: |
        echo "Deploying production-optimized backend..."
        gcloud run deploy ${{ env.BACKEND_SERVICE }} \
          --image ${{ env.BACKEND_IMAGE }}:optimized \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production,SESSION_SECRET=realm-rivalry-session-key-prod \
          --set-secrets DATABASE_URL=database-url:latest,VITE_FIREBASE_API_KEY=firebase-api-key:latest,VITE_FIREBASE_PROJECT_ID=firebase-project-id:latest,VITE_FIREBASE_APP_ID=firebase-app-id:latest \
          --memory 2Gi \
          --cpu 2 \
          --concurrency 40 \
          --max-instances 5 \
          --port 8080 \
          --timeout 120s

    - name: Test optimized deployment
      run: |
        echo "Getting backend URL..."
        BACKEND_URL=$(gcloud run services describe ${{ env.BACKEND_SERVICE }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Backend URL: $BACKEND_URL"
        
        echo "Testing health endpoint..."
        curl -f "$BACKEND_URL/health"
        
        echo "Testing API health..."
        curl -f "$BACKEND_URL/api/health"
        
        echo "âœ… Production-optimized deployment successful!"
        echo "Backend available at: $BACKEND_URL"