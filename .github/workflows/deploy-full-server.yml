name: Deploy Full Production Server

on:
  workflow_dispatch:

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  SERVICE_NAME: realm-rivalry-backend
  IMAGE_NAME: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    - name: Create production server entrypoint
      run: |
        cat > server-production.js << 'EOF'
        // Production entrypoint that starts the actual TypeScript server
        const { spawn } = require('child_process');
        const path = require('path');

        console.log('🚀 Starting full production server...');
        console.log('📁 Working directory:', process.cwd());
        console.log('🔧 Node version:', process.version);
        console.log('🔧 Environment:', process.env.NODE_ENV);

        // Start the TypeScript server using tsx
        const serverProcess = spawn('npx', ['tsx', 'server/index.ts'], {
          stdio: 'inherit',
          env: {
            ...process.env,
            NODE_ENV: 'production',
            PORT: process.env.PORT || '8080'
          }
        });

        serverProcess.on('error', (error) => {
          console.error('❌ Server process error:', error);
          process.exit(1);
        });

        serverProcess.on('exit', (code) => {
          console.log(`❌ Server process exited with code ${code}`);
          process.exit(code || 1);
        });

        // Handle shutdown signals
        process.on('SIGTERM', () => {
          console.log('🔄 Received SIGTERM, shutting down gracefully...');
          serverProcess.kill('SIGTERM');
        });

        process.on('SIGINT', () => {
          console.log('🔄 Received SIGINT, shutting down gracefully...');
          serverProcess.kill('SIGINT');
        });
        EOF

    - name: Create full production Dockerfile
      run: |
        cat > Dockerfile.production << 'EOF'
        FROM --platform=linux/amd64 node:20-alpine
        
        # Install dumb-init and tsx
        RUN apk add --no-cache dumb-init
        
        WORKDIR /app
        
        # Copy package files
        COPY package*.json ./
        COPY tsconfig*.json ./
        
        # Install ALL dependencies (including dev for tsx)
        RUN npm ci && npm cache clean --force
        
        # Copy all source code
        COPY . .
        
        # Generate Prisma client
        RUN npx prisma generate
        
        # Build frontend
        RUN npm run build || echo "Frontend build failed, continuing..."
        
        # Set environment variables
        ENV NODE_ENV=production
        ENV PORT=8080
        
        # Expose port
        EXPOSE 8080
        
        # Use non-root user for security
        USER node
        
        # Use dumb-init and start the production server
        ENTRYPOINT ["dumb-init", "--"]
        CMD ["node", "server-production.js"]
        EOF

    - name: Build full production container
      run: |
        echo "Building full production server..."
        docker build --platform linux/amd64 -f Dockerfile.production -t ${{ env.IMAGE_NAME }}:full-server .

    - name: Push full server container
      run: docker push ${{ env.IMAGE_NAME }}:full-server

    - name: Deploy full server to Cloud Run
      run: |
        echo "Deploying full production server..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:full-server \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production \
          --set-secrets DATABASE_URL=database-url:latest,VITE_FIREBASE_API_KEY=firebase-api-key:latest,VITE_FIREBASE_PROJECT_ID=firebase-project-id:latest,VITE_FIREBASE_APP_ID=firebase-app-id:latest \
          --memory 2Gi \
          --cpu 2 \
          --max-instances 10 \
          --port 8080 \
          --timeout 300s

    - name: Test full server deployment
      run: |
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Service URL: $SERVICE_URL"
        
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/health" || echo "Health check failed"
        
        echo "Testing team creation endpoint..."
        curl -f "$SERVICE_URL/api/teams/my" || echo "Teams endpoint failed"
        
        echo "Testing season endpoint..."
        curl -f "$SERVICE_URL/api/season/current-cycle" || echo "Season endpoint check failed"
        
        echo "✅ Full server deployment completed!"