name: Deploy Using Existing Files

on:
  workflow_dispatch:

env:
  PROJECT_ID: direct-glider-465821-p7
  REGION: us-east5
  SERVICE_NAME: realm-rivalry-backend
  IMAGE_NAME: us-east5-docker.pkg.dev/direct-glider-465821-p7/realm-rivalry/backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker us-east5-docker.pkg.dev

    - name: Create simple server file
      run: |
        cat > app.js << 'EOF'
        import express from 'express';
        import path from 'path';
        import fs from 'fs';
        import { fileURLToPath } from 'url';

        const __filename = fileURLToPath(import.meta.url);
        const __dirname = path.dirname(__filename);
        const app = express();

        const port = process.env.PORT || 8080;

        app.use(express.json());
        app.use(express.static('dist'));

        app.get('/health', (req, res) => {
          res.status(200).json({ 
            status: 'healthy',
            timestamp: new Date().toISOString(),
            version: 'existing-files'
          });
        });

        app.get('/api/teams/my', (req, res) => {
          res.json({ needsTeamCreation: true });
        });

        app.get('/api/health', (req, res) => {
          res.json({ api: 'healthy' });
        });

        app.get('*', (req, res) => {
          if (req.path.startsWith('/api/')) {
            return res.status(404).json({ error: 'API endpoint not found' });
          }
          const indexPath = path.join(__dirname, 'dist', 'index.html');
          if (fs.existsSync(indexPath)) {
            res.sendFile(indexPath);
          } else {
            res.json({ message: 'Realm Rivalry API Server', status: 'ready' });
          }
        });

        app.listen(port, '0.0.0.0', () => {
          console.log(`Server listening on port ${port}`);
          console.log(`Health check: http://localhost:${port}/health`);
        });
        EOF

    - name: Create simple Dockerfile
      run: |
        cat > Dockerfile.deploy << 'EOF'
        FROM --platform=linux/amd64 node:20-alpine
        
        RUN apk add --no-cache dumb-init
        
        WORKDIR /app
        
        COPY package*.json ./
        RUN npm ci --only=production && npm cache clean --force
        
        COPY . .
        
        RUN npm run build || echo "No build script found"
        
        ENV NODE_ENV=production
        ENV PORT=8080
        
        EXPOSE 8080
        
        USER node
        
        ENTRYPOINT ["dumb-init", "--"]
        CMD ["node", "app.js"]
        EOF

    - name: Build container
      run: |
        echo "Building with generated Dockerfile..."
        docker build --platform linux/amd64 -f Dockerfile.deploy -t ${{ env.IMAGE_NAME }}:latest .

    - name: Push container
      run: docker push ${{ env.IMAGE_NAME }}:latest

    - name: Deploy to Cloud Run
      run: |
        echo "Deploying to Cloud Run..."
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image ${{ env.IMAGE_NAME }}:latest \
          --region ${{ env.REGION }} \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars NODE_ENV=production \
          --set-secrets DATABASE_URL=database-url:latest,VITE_FIREBASE_API_KEY=firebase-api-key:latest,VITE_FIREBASE_PROJECT_ID=firebase-project-id:latest,VITE_FIREBASE_APP_ID=firebase-app-id:latest \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --port 8080 \
          --timeout 300s

    - name: Test deployment
      run: |
        echo "Getting service URL..."
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region=${{ env.REGION }} --format="value(status.url)")
        echo "Service URL: $SERVICE_URL"
        
        echo "Testing health endpoint..."
        curl -f "$SERVICE_URL/health"
        
        echo "âœ… Deployment successful!"