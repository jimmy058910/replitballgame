Project Brief: System Design for Injury & Stamina Mechanics
Project Goal:
Create a persistent Injury and Stamina system for a text-based sports management game. This system must handle how players get injured and recover based on game mode and player stats (Power, Stamina). Users must be able to manage their team's health using a limited number of consumable items per day.

1. Core Concepts & Data Model
A. Stamina System:
Stamina is now two distinct values:

in_game_stamina (0-100): A temporary value used during a single match. It depletes with actions and affects performance within that match. It is discarded after the match ends.

daily_stamina_level (0-100): A persistent "freshness" stat that carries over from day to day. It determines the starting in_game_stamina for League and Tournament games and is depleted by playing in those modes.

B. Injury System:
Injuries are persistent and have a severity measured in "Recovery Points" (RP).

Injury Status: "Healthy", "Minor Injury" (100 RP to heal), "Moderate Injury" (300 RP to heal), "Severe Injury" (750 RP to heal).

Injury Effects:

Minor: Small debuff to speed and agility during a game.

Moderate: Significant debuff to speed, agility, and power.

Severe: Player is unplayable in League and Tournament matches.

C. New/Updated Player Data Properties:
Each player object must have these persistent properties:

daily_stamina_level: INTEGER (0-100, default: 100)

injury_status: TEXT (Default: "Healthy")

injury_recovery_points_needed: INTEGER (Default: 0)

injury_recovery_points_current: INTEGER (Default: 0)

daily_items_used: INTEGER (Default: 0)

2. Game Modes: Impact on Injury & Stamina
The consequences of playing a match depend entirely on the game mode.

Game Mode

Lasting Injury Chance

Post-Game daily_stamina_level Depletion

Starting in_game_stamina

League

Normal

High (e.g., -30 points)

Player's daily_stamina_level

Tournament

Low

Minimal (e.g., -10 points)

Player's daily_stamina_level

Exhibition

None (In-game injuries only, never persist)

None

Always 100%

3. Gameplay Mechanics & Implementation
A. How Injuries Occur (The Tackle Event):
When a tackle succeeds in-game, calculate the chance of a lasting injury.

Injury Check Algorithm:

Determine base_injury_chance based on game mode:

League Game: 20%

Tournament Game: 5%

Exhibition Game: 0% (in-game effects might happen, but no persistent injury is recorded).

Calculate power_modifier: The difference between Tackler.power and Carrier.agility. This modifier can be positive or negative. Formula: (Tackler.power - Carrier.agility) * 0.5.

Calculate stamina_modifier: If the carrier's in_game_stamina is below 50%, add a penalty. Formula: if Carrier.stamina < 50: bonus_chance = 10.

final_injury_chance = base_injury_chance + power_modifier + stamina_modifier.

Roll a 1-100 die. If the roll is less than or equal to final_injury_chance, an injury occurs. Determine severity randomly (e.g., 70% Minor, 25% Moderate, 5% Severe) and update the player's persistent data.

Commentary Example: "[08:15] Player 5 is leveled by a powerful tackle from Player 11! He's slow to get up... the team trainer reports a minor injury."

B. The Daily Reset (Scheduled for 3 AM)
This global event manages natural recovery.

Daily Reset Algorithm:

Reset daily_items_used to 0 for all players.

Natural Injury Recovery: Add a base recovery amount (e.g., +50 RP) to injury_recovery_points_current for all injured players.

Natural Stamina Recovery (Stat-Based): A player's Stamina attribute now determines their recovery rate.

base_stamina_recovery = 20

stat_bonus_recovery = player.stamina * 0.5 (e.g., a player with 30 Stamina gets +15 bonus recovery).

total_recovery = base_stamina_recovery + stat_bonus_recovery

Update player.daily_stamina_level = min(100, player.daily_stamina_level + total_recovery).

Check for injury status improvements after recovery points are added.

4. User Management: Item Usage
The logic for using an item remains the same, but is now contextualized by the new rules. The user can apply 1 or 2 items per player per day.

Command: use_item [item_id] on [player_name]

Algorithm:

Check if user owns the item.

Check if player.daily_items_used < 2. If not, reject.

Check if item is appropriate (e.g., no injury salves on healthy players).

Apply the item's effect_value to the player's persistent daily_stamina_level or injury_recovery_points_current.

Increment player.daily_items_used by 1.

Remove the item from inventory.

Provide success/failure feedback to the user.

5. Example Scenarios
Scenario 1: Game Day

Player 5 (Stamina Attribute: 20) has daily_stamina_level: 90.

He plays a League Game. His starting in_game_stamina is 90. He is tackled hard and suffers a "Minor Injury" (100 RP).

After the game, his daily_stamina_level is reduced by 30, down to 60.

He also plays an Exhibition Game. His in_game_stamina for this match starts at 100. It depletes during the match, but his daily_stamina_level of 60 remains unchanged after.

Scenario 2: Daily Reset

At 3 AM, the reset happens.

Player 5's daily_items_used resets to 0.

His Minor Injury naturally recovers 50 RP. He now has 50/100 RP healed.

His stamina recovers. base_recovery (20) + stat_bonus (20 * 0.5 = 10) = 30. His daily_stamina_level goes from 60 to 90.

Scenario 3: Item Management

The user sees Player 5 has a Minor Injury (50/100 RP healed).

User command: use_item 204 on Player 5 ("Gryllstone Dust", +50 RP).

System applies 50 RP. Player 5 now has 100/100 RP. His injury_status is changed to "Healthy", and injury_recovery_points are reset to 0. His daily_items_used is now 1.

User command: use_item 203 on Player 5 ("Sylvan Sap", +40 Stamina).

System applies 40 stamina. His daily_stamina_level goes from 90 to 100 (clamped). His daily_items_used is now 2.

User command: use_item 201 on Player 5 ("Salve Pouch").

System rejects the command. Output: Error: Player 5 has already received the maximum number of recovery items for today.