Testing Deployment
Step 1: Verify Application
# Get service URL
SERVICE_URL=$(gcloud run services describe realm-rivalry \
 --region $REGION \
 --format 'value(status.url)')
 
echo "Service URL: $SERVICE_URL"
 
# Test health endpoint
curl $SERVICE_URL/health
 
# Test main application
curl -I $SERVICE_URL
Step 2: Load Testing (Optional)
# Install Apache Bench
sudo apt-get install apache2-utils
 
# Run load test
ab -n 1000 -c 10 $SERVICE_URL/health
Troubleshooting
Common Issues
1. Container Not Starting
# Check Cloud Run logs
gcloud logs tail /projects/$PROJECT_ID/logs/run.googleapis.com%2Fstdout --follow
 
# Common fixes:
# - Ensure PORT environment variable is set to 8080
# - Check Dockerfile EXPOSE directive
# - Verify health check endpoint
2. Database Connection Issues
# Test database connection locally
node -e "
const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()
prisma.\$connect()
 .then(() => console.log('Database connected'))
 .catch(console.error)
"
 
# Common fixes:
# - Verify DATABASE_URL in Secret Manager
# - Check Neon database status
# - Ensure SSL mode is enabled
3. WebSocket Connection Issues
# WebSocket connections may require additional configuration
# Cloud Run supports WebSocket connections by default
# Ensure proper WebSocket headers are set
Rollback Deployment
# List revisions
gcloud run revisions list --service realm-rivalry --region $REGION
 
# Rollback to previous revision
gcloud run services update-traffic realm-rivalry \
 --to-revisions REVISION-NAME=100 \
 --region $REGION
Cost Optimization
Step 1: Configure Auto-scaling
# Update service with cost-optimized settings
gcloud run services update realm-rivalry \
 --min-instances 0 \
 --max-instances 5 \
 --concurrency 100 \
 --cpu 1 \
 --memory 1Gi \
 --region $REGION
Step 2: Enable Budget Alerts
# Create budget alert
gcloud billing budgets create \
 --billing-account $BILLING_ACCOUNT_ID \
 --display-name "Realm Rivalry Monthly Budget" \
 --budget-amount 100USD \
 --threshold-rule percent=50,basis=current-spend \
 --threshold-rule percent=90,basis=current-spend \
 --threshold-rule percent=100,basis=current-spend
Final Checklist
Before going live:
 All secrets properly stored in Secret Manager
 Domain name configured and SSL verified
 Health checks passing
 Monitoring and alerts configured
 Database backups verified (Neon automatic backups)
 Load testing completed
 Error handling tested
 Rollback procedure tested
 Team access configured
 Documentation updated
Post-Deployment
Step 1: Monitor Initial Traffic
# Monitor logs for first hour
gcloud logs tail /projects/$PROJECT_ID/logs/run.googleapis.com%2Fstderr --follow
 
# Check metrics
gcloud monitoring metrics list --filter="resource.type=cloud_run_revision"
Step 2: Performance Tuning
Monitor response times and adjust CPU/memory if needed
Analyze slow database queries
Optimize caching strategies
Consider CDN for static assets
Step 3: Regular Maintenance
Update Docker base images monthly
Monitor and rotate secrets quarterly
Review and update IAM permissions
Keep dependencies updated
