System Design for a Dynamic Player Marketplace

Project Goal:
Implement a fully functional, asynchronous player marketplace where users can list their players for sale, and other users can bid on them in an auction format or purchase them directly. The system must operate within a fixed 17-day season cycle, with special rules for the off-season.

These players should stat ranges and potential based on the team that is viewings staff/scouts.

1. Core Concepts & Rules
Auction & Buy Now: Players are listed with both a starting bid price and an optional "Buy Now" price.

Listing Limits: A user cannot list a player if doing so would leave them with 10 or fewer players on their roster. A user can have a maximum of 3 players listed on the marketplace at any one time.

Listing Fee: A small, non-refundable fee in game credits is charged for listing a player to discourage market flooding.

Auction Durations: Users can select from several auction lengths: 12 hours, 24 hours, 3 days, or 7 days.

End-of-Season Deadline: The system must prevent auctions from being created that would end after the server reset on Day 17 at 3 AM. For example, on Day 15, a user could not select a 3-day or 7-day auction.

Off-Season Market (Days 16-17): During the 2-day off-season, auctions are disabled. All listings are automatically converted to Buy Now only. Any player not sold by the end of Day 17 is automatically delisted and returned to their original owner.

2. Database Schema: MarketplaceListings Table
A new table is required to manage all active listings.

Column Name

Data Type

Description

Example

listing_id

INTEGER (PK)

Unique ID for this specific auction listing.

1001

player_id

INTEGER (FK)

ID of the player being sold.

5 (Player 5)

seller_team_id

INTEGER (FK)

ID of the team selling the player.

24

start_bid

INTEGER

The minimum starting bid amount.

1000

buy_now_price

INTEGER (null)

The optional instant purchase price.

15000

current_bid

INTEGER

The current highest bid amount. Defaults to start_bid.

1250

current_high_bidder_team_id

INTEGER (null)

ID of the team with the current high bid.

77

expiry_timestamp

DATETIME

The exact date and time the auction will end.

"2025-06-30 14:30:00"

is_active

BOOLEAN

true if the auction is running, false if completed/expired.

true

3. User Commands & Interactions
list_player [player_id] start_bid [amount] duration [hours] buy_now [optional_amount]

view_listings (with filters for role, stats, etc.)

bid [listing_id] [amount]

buy_now [listing_id]

view_my_listings

4. System Logic & Algorithms
A. Listing a Player (list_player command):

Validation:

Does the player belong to the user's team?

Does the user's team have > 10 players?

Does the user have < 3 players already listed?

Is the chosen duration valid and does the calculated expiry_timestamp occur before Day 17, 3 AM?

If a buy_now price is provided, is it above the system-generated minimum?

Minimum Buy Now Price: Should be automatically calculated to prevent market manipulation. Formula suggestion: (Starting Bid * 1.5) OR (Player's internal 'Value' * 0.75), whichever is higher.

Execution:

If all checks pass:

Deduct the listing fee from the user's account.

Mark the player as "on the market" (they cannot be used in games or for item applications).

Create a new entry in the MarketplaceListings table with all the relevant data.

Return Success! [Player Name] has been listed for auction.

B. Placing a Bid (bid command):

Validation:

Does the listing_id exist and is it is_active?

Is the bid amount greater than current_bid?

Does the user have enough credits?

Execution:

If checks pass:

Escrow System: Hold the user's bid amount in escrow. If they are outbid, their previous bid is returned to them.

Update the MarketplaceListings entry with the new current_bid and current_high_bidder_team_id.

Anti-Sniping (Recommended): If a bid is placed in the final minutes of an auction (e.g., last 5 minutes), automatically extend the expiry_timestamp by another 5 minutes.

Notify the previous high bidder they have been outbid.

Return Success! You are the new high bidder for [Player Name].

C. Buy Now (buy_now command):

Validation:

Does the listing_id exist and is it is_active?

Does the listing have a buy_now_price?

Does the user have enough credits for the buy_now_price?

Execution (This ends the auction immediately):

Deduct buy_now_price from the buyer.

Transfer buy_now_price (minus a small market tax, e.g., 5%) to the seller.

Transfer the player_id from the seller's roster to the buyer's roster.

Set is_active = false for the listing.

Return Congratulations! You have purchased [Player Name]!

D. Off-Season Logic (Triggered on Day 16, 3 AM):

Iterate through all active listings.

For any listing with an auction component (start_bid), remove the auction capability. The listing remains active but can only be purchased via buy_now. If no buy_now_price was set, one is automatically generated based on the player's value.

5. Daily Server Process (3 AM Reset)
The server checks for any listings where expiry_timestamp has passed and is_active is true.

For each expired auction:

If there was a high bidder: Process the transaction (transfer player to winner, transfer credits to seller, return any outbid funds from escrow).

If there were no bids: The player is returned to the original owner.

On Day 17 at 3 AM: All remaining active market listings are cancelled and players are returned to their owners before the new season's leagues are generated.