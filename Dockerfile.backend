# Multi-stage build for Cloud Run backend (CRITICAL: Force AMD64 architecture)
FROM --platform=linux/amd64 node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install ALL dependencies (including dev dependencies for building)
RUN npm ci

# Copy ALL source code for building
COPY server/ ./server/
COPY shared/ ./shared/
COPY prisma/ ./prisma/
COPY client/ ./client/
COPY public/ ./public/
COPY types/ ./types/
COPY vite.config.ts ./
COPY vite.config.production.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./

# Generate Prisma client
RUN npx prisma generate

# Verify Prisma client generation
RUN ls -la generated/prisma/ && echo "✅ Prisma client generated successfully"
RUN test -f generated/prisma/index.js && echo "✅ Prisma index.js exists" || echo "❌ Prisma index.js missing"

# INDUSTRY STANDARD: Compile TypeScript server to JavaScript for production  
RUN rm -rf dist && npm run build:server && npx tsc-alias -p tsconfig.server.json --resolve-full-paths && npm run build

# Verify both frontend and server compilation
RUN ls -la dist/public/ && echo "✅ Frontend compiled successfully"
RUN ls -la dist/server/ && echo "✅ Server compiled to JavaScript successfully"

# Production stage (CRITICAL: Force AMD64 architecture)
FROM --platform=linux/amd64 node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Set working directory
WORKDIR /app

# Copy dependencies and generated files from builder
COPY --from=builder --chown=backend:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=backend:nodejs /app/generated ./generated
COPY --from=builder --chown=backend:nodejs /app/tsconfig.json ./
COPY --from=builder --chown=backend:nodejs /app/tsconfig.server.json ./
COPY --from=builder --chown=backend:nodejs /app/package.json ./

# CRITICAL FIX: Copy COMPILED JavaScript, not TypeScript source
COPY --from=builder --chown=backend:nodejs /app/dist ./dist/

# DEPLOYMENT FIX: Copy Prisma client to where compiled server expects it
COPY --from=builder --chown=backend:nodejs /app/generated ./dist/generated
COPY --from=builder --chown=backend:nodejs /app/shared/ ./shared/
COPY --from=builder --chown=backend:nodejs /app/prisma/ ./prisma/
COPY --from=builder --chown=backend:nodejs /app/types/ ./types/

# Copy Vite config files needed by server/vite.ts
COPY --from=builder --chown=backend:nodejs /app/vite.config.ts ./
COPY --from=builder --chown=backend:nodejs /app/vite.config.production.ts ./
COPY --from=builder --chown=backend:nodejs /app/tailwind.config.ts ./
COPY --from=builder --chown=backend:nodejs /app/postcss.config.js ./

# Verify frontend files exist in production container
RUN ls -la dist/ && echo "✅ Frontend files copied successfully"

# COMPREHENSIVE BUILD VERIFICATION: Ensure all critical files exist
RUN ls -la generated/prisma/ && echo "✅ Prisma client at /app/generated/prisma/"
RUN ls -la dist/generated/prisma/ && echo "✅ Prisma client at /app/dist/generated/prisma/"
RUN test -f dist/generated/prisma/index.js && echo "✅ Critical: Prisma index.js found at expected location" || echo "❌ FATAL: Prisma index.js missing at dist/generated/prisma/"
RUN test -f dist/server/index.js && echo "✅ Critical: Server entry point exists" || echo "❌ FATAL: Server index.js missing"
RUN test -d dist/public && echo "✅ Critical: Frontend build exists" || echo "❌ FATAL: Frontend build missing"
RUN test -f shared/timezones.json && echo "✅ Critical: Shared timezones.json exists" || echo "❌ FATAL: timezones.json missing"

# Switch to non-root user for security
USER backend

# CRITICAL CLOUD RUN FIXES: Environment and network configuration
ENV NODE_ENV=production
ENV HOST=0.0.0.0
# DO NOT hardcode PORT - Cloud Run sets it dynamically

# Expose default port (Cloud Run will override with PORT env var)
EXPOSE 8080

# Health check (disabled for Cloud Run - uses startup probes instead)
# HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
#   CMD node -e "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# CRITICAL CONTAINER STARTUP FIX: Direct node invocation for proper signal handling
# ES modules work automatically with "type": "module" in package.json
CMD ["dumb-init", "node", "dist/server/index.js"]