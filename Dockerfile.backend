# Multi-stage build for Cloud Run backend
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY server/ ./server/
COPY shared/ ./shared/
COPY prisma/ ./prisma/

# Generate Prisma client
RUN npx prisma generate

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Set working directory
WORKDIR /app

# Copy dependencies and generated files from builder
COPY --from=builder --chown=backend:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=backend:nodejs /app/generated ./generated
COPY --from=builder --chown=backend:nodejs /app/tsconfig.json ./
COPY --from=builder --chown=backend:nodejs /app/tsconfig.server.json ./

# Copy source code
COPY --chown=backend:nodejs server/ ./server/
COPY --chown=backend:nodejs shared/ ./shared/
COPY --chown=backend:nodejs prisma/ ./prisma/

# Switch to non-root user
USER backend

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Start server with dumb-init
ENTRYPOINT ["dumb-init", "--"]
CMD ["npx", "tsx", "server/cloud-run-backend.ts"]