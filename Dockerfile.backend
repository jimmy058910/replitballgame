# Multi-stage build for Cloud Run backend
FROM node:20-alpine AS builder

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./

# Install ALL dependencies (including dev dependencies for building)
RUN npm ci

# Copy ALL source code for building
COPY server/ ./server/
COPY shared/ ./shared/
COPY prisma/ ./prisma/
COPY client/ ./client/
COPY public/ ./public/
COPY vite.config.ts ./
COPY vite.config.production.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./

# Generate Prisma client
RUN npx prisma generate

# Build the frontend
RUN npm run build

# Verify build output
RUN ls -la dist/ || echo "⚠️ No dist folder found"

# Production stage
FROM node:20-alpine AS production

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S backend -u 1001

# Set working directory
WORKDIR /app

# Copy dependencies and generated files from builder
COPY --from=builder --chown=backend:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=backend:nodejs /app/generated ./generated
COPY --from=builder --chown=backend:nodejs /app/tsconfig.json ./
COPY --from=builder --chown=backend:nodejs /app/tsconfig.server.json ./

# Copy source code and built frontend (use builder stage for server code)
COPY --from=builder --chown=backend:nodejs /app/server/ ./server/
COPY --from=builder --chown=backend:nodejs /app/shared/ ./shared/
COPY --from=builder --chown=backend:nodejs /app/prisma/ ./prisma/
COPY --from=builder --chown=backend:nodejs /app/dist ./dist/

# Verify frontend files exist in production container
RUN ls -la dist/ && echo "✅ Frontend files copied successfully"

# Switch to non-root user
USER backend

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Deploy enhanced server with database support (maintains fast startup)
CMD ["dumb-init", "npx", "tsx", "server/enhanced.ts"]