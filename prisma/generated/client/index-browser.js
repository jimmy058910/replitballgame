
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  firstName: 'firstName',
  lastName: 'lastName',
  profileImageUrl: 'profileImageUrl',
  bio: 'bio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  referralCode: 'referralCode',
  referredBy: 'referredBy',
  ndaAccepted: 'ndaAccepted',
  ndaAcceptedAt: 'ndaAcceptedAt',
  ndaVersion: 'ndaVersion'
};

exports.Prisma.SessionScalarFieldEnum = {
  sid: 'sid',
  sess: 'sess',
  expire: 'expire'
};

exports.Prisma.TeamScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  name: 'name',
  logoUrl: 'logoUrl',
  isAI: 'isAI',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  camaraderie: 'camaraderie',
  fanLoyalty: 'fanLoyalty',
  homeField: 'homeField',
  tacticalFocus: 'tacticalFocus',
  leagueId: 'leagueId',
  division: 'division',
  subdivision: 'subdivision',
  wins: 'wins',
  losses: 'losses',
  points: 'points'
};

exports.Prisma.PlayerScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  firstName: 'firstName',
  lastName: 'lastName',
  race: 'race',
  age: 'age',
  role: 'role',
  speed: 'speed',
  power: 'power',
  throwing: 'throwing',
  catching: 'catching',
  kicking: 'kicking',
  staminaAttribute: 'staminaAttribute',
  leadership: 'leadership',
  agility: 'agility',
  potentialRating: 'potentialRating',
  dailyStaminaLevel: 'dailyStaminaLevel',
  injuryStatus: 'injuryStatus',
  injuryRecoveryPointsNeeded: 'injuryRecoveryPointsNeeded',
  injuryRecoveryPointsCurrent: 'injuryRecoveryPointsCurrent',
  dailyItemsUsed: 'dailyItemsUsed',
  careerInjuries: 'careerInjuries',
  gamesPlayedLastSeason: 'gamesPlayedLastSeason',
  seasonMinutesLeague: 'seasonMinutesLeague',
  seasonMinutesTournament: 'seasonMinutesTournament',
  seasonMinutesExhibition: 'seasonMinutesExhibition',
  seasonMinutesTotal: 'seasonMinutesTotal',
  isOnMarket: 'isOnMarket',
  isRetired: 'isRetired',
  camaraderieScore: 'camaraderieScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PlayerEquipmentScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  itemId: 'itemId',
  equippedAt: 'equippedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  staffId: 'staffId',
  salary: 'salary',
  length: 'length',
  signingBonus: 'signingBonus',
  startDate: 'startDate'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  category: 'category',
  tiers: 'tiers'
};

exports.Prisma.PlayerSkillLinkScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  skillId: 'skillId',
  currentTier: 'currentTier',
  acquiredAt: 'acquiredAt'
};

exports.Prisma.StaffScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  type: 'type',
  name: 'name',
  level: 'level',
  motivation: 'motivation',
  development: 'development',
  teaching: 'teaching',
  physiology: 'physiology',
  talentIdentification: 'talentIdentification',
  potentialAssessment: 'potentialAssessment',
  tactics: 'tactics',
  age: 'age',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeamFinancesScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  credits: 'credits',
  gems: 'gems',
  escrowCredits: 'escrowCredits',
  escrowGems: 'escrowGems',
  projectedIncome: 'projectedIncome',
  projectedExpenses: 'projectedExpenses',
  lastSeasonRevenue: 'lastSeasonRevenue',
  lastSeasonExpenses: 'lastSeasonExpenses',
  facilitiesMaintenanceCost: 'facilitiesMaintenanceCost',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StadiumScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  capacity: 'capacity',
  concessionsLevel: 'concessionsLevel',
  parkingLevel: 'parkingLevel',
  vipSuitesLevel: 'vipSuitesLevel',
  merchandisingLevel: 'merchandisingLevel',
  lightingScreensLevel: 'lightingScreensLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  slot: 'slot',
  raceRestriction: 'raceRestriction',
  statEffects: 'statEffects',
  rarity: 'rarity',
  creditPrice: 'creditPrice',
  gemPrice: 'gemPrice',
  effectValue: 'effectValue'
};

exports.Prisma.InventoryItemScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  itemId: 'itemId',
  quantity: 'quantity',
  acquiredAt: 'acquiredAt'
};

exports.Prisma.ActiveBoostScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  playerId: 'playerId',
  itemId: 'itemId',
  matchType: 'matchType',
  isActive: 'isActive',
  appliedAt: 'appliedAt'
};

exports.Prisma.MarketplaceListingScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  sellerTeamId: 'sellerTeamId',
  startBid: 'startBid',
  buyNowPrice: 'buyNowPrice',
  minBuyNowPrice: 'minBuyNowPrice',
  currentBid: 'currentBid',
  currentHighBidderTeamId: 'currentHighBidderTeamId',
  expiryTimestamp: 'expiryTimestamp',
  originalExpiryTimestamp: 'originalExpiryTimestamp',
  auctionExtensions: 'auctionExtensions',
  listingFee: 'listingFee',
  marketTaxRate: 'marketTaxRate',
  escrowAmount: 'escrowAmount',
  listingStatus: 'listingStatus',
  isOffSeasonConverted: 'isOffSeasonConverted',
  autoDelistAt: 'autoDelistAt',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BidScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  bidderTeamId: 'bidderTeamId',
  bidAmount: 'bidAmount',
  escrowAmount: 'escrowAmount',
  isWinningBid: 'isWinningBid',
  isRefunded: 'isRefunded',
  placedAt: 'placedAt'
};

exports.Prisma.ListingHistoryScalarFieldEnum = {
  id: 'id',
  listingId: 'listingId',
  actionType: 'actionType',
  teamId: 'teamId',
  amount: 'amount',
  oldValue: 'oldValue',
  newValue: 'newValue',
  description: 'description',
  timestamp: 'timestamp'
};

exports.Prisma.PlayerMarketValueScalarFieldEnum = {
  id: 'id',
  playerId: 'playerId',
  carRating: 'carRating',
  potential: 'potential',
  minBuyNow: 'minBuyNow',
  marketValue: 'marketValue',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt'
};

exports.Prisma.StrategyScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  formationJson: 'formationJson',
  substitutionJson: 'substitutionJson',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeagueScalarFieldEnum = {
  id: 'id',
  division: 'division',
  name: 'name',
  seasonId: 'seasonId'
};

exports.Prisma.LeagueStandingScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  teamId: 'teamId',
  teamName: 'teamName',
  wins: 'wins',
  losses: 'losses',
  ties: 'ties',
  pointsFor: 'pointsFor',
  pointsAgainst: 'pointsAgainst',
  pointDifferential: 'pointDifferential',
  streak: 'streak',
  rank: 'rank',
  updatedAt: 'updatedAt'
};

exports.Prisma.GameScalarFieldEnum = {
  id: 'id',
  leagueId: 'leagueId',
  homeTeamId: 'homeTeamId',
  awayTeamId: 'awayTeamId',
  homeScore: 'homeScore',
  awayScore: 'awayScore',
  gameDate: 'gameDate',
  simulated: 'simulated',
  simulationLog: 'simulationLog',
  matchType: 'matchType',
  tournamentId: 'tournamentId',
  round: 'round',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.SeasonScalarFieldEnum = {
  id: 'id',
  seasonNumber: 'seasonNumber',
  startDate: 'startDate',
  endDate: 'endDate',
  currentDay: 'currentDay',
  phase: 'phase',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  linkTo: 'linkTo',
  createdAt: 'createdAt'
};

exports.Prisma.TryoutPackScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  creditCost: 'creditCost',
  gemCost: 'gemCost',
  numPlayers: 'numPlayers',
  qualityTier: 'qualityTier'
};

exports.Prisma.TryoutHistoryScalarFieldEnum = {
  id: 'id',
  teamId: 'teamId',
  seasonId: 'seasonId',
  tryoutType: 'tryoutType',
  cost: 'cost',
  playersAdded: 'playersAdded',
  conductedAt: 'conductedAt',
  playerId: 'playerId'
};

exports.Prisma.GemPackScalarFieldEnum = {
  id: 'id',
  name: 'name',
  gemAmount: 'gemAmount',
  usdPrice: 'usdPrice',
  productId: 'productId'
};

exports.Prisma.CreditExchangeRateScalarFieldEnum = {
  id: 'id',
  gems: 'gems',
  credits: 'credits',
  bonusPercentage: 'bonusPercentage'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerUserId: 'referrerUserId',
  referredUserId: 'referredUserId',
  rewardGiven: 'rewardGiven',
  createdAt: 'createdAt'
};

exports.Prisma.RedeemCodeScalarFieldEnum = {
  id: 'id',
  description: 'description',
  rewardType: 'rewardType',
  rewardValue: 'rewardValue',
  maxUses: 'maxUses',
  currentUses: 'currentUses',
  isActive: 'isActive',
  expiryDate: 'expiryDate',
  createdAt: 'createdAt'
};

exports.Prisma.RedeemCodeRecordScalarFieldEnum = {
  id: 'id',
  redeemCodeId: 'redeemCodeId',
  userProfileId: 'userProfileId',
  redeemedAt: 'redeemedAt'
};

exports.Prisma.AdRewardMilestoneScalarFieldEnum = {
  id: 'id',
  userProfileId: 'userProfileId',
  totalAdsWatched: 'totalAdsWatched',
  adsWatchedToday: 'adsWatchedToday',
  lastAdWatchedAt: 'lastAdWatchedAt'
};

exports.Prisma.PremiumBoxRewardScalarFieldEnum = {
  id: 'id',
  category: 'category',
  rewardType: 'rewardType',
  rewardValue: 'rewardValue',
  weight: 'weight'
};

exports.Prisma.EquipmentRewardScalarFieldEnum = {
  id: 'id',
  boxId: 'boxId',
  itemId: 'itemId',
  rarity: 'rarity',
  weight: 'weight'
};

exports.Prisma.TournamentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  tournamentId: 'tournamentId',
  type: 'type',
  division: 'division',
  status: 'status',
  startTime: 'startTime',
  registrationEndTime: 'registrationEndTime',
  endTime: 'endTime',
  entryFeeCredits: 'entryFeeCredits',
  entryFeeGems: 'entryFeeGems',
  entryFeeItemId: 'entryFeeItemId',
  prizePoolJson: 'prizePoolJson',
  seasonDay: 'seasonDay',
  createdAt: 'createdAt'
};

exports.Prisma.TournamentEntryScalarFieldEnum = {
  id: 'id',
  tournamentId: 'tournamentId',
  teamId: 'teamId',
  registeredAt: 'registeredAt',
  finalRank: 'finalRank',
  rewardsClaimed: 'rewardsClaimed'
};

exports.Prisma.PaymentTransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  teamId: 'teamId',
  transactionType: 'transactionType',
  itemName: 'itemName',
  itemType: 'itemType',
  creditsAmount: 'creditsAmount',
  gemsAmount: 'gemsAmount',
  status: 'status',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.FieldSize = exports.$Enums.FieldSize = {
  STANDARD: 'STANDARD',
  LARGE: 'LARGE',
  SMALL: 'SMALL'
};

exports.TacticalFocus = exports.$Enums.TacticalFocus = {
  BALANCED: 'BALANCED',
  ALL_OUT_ATTACK: 'ALL_OUT_ATTACK',
  DEFENSIVE_WALL: 'DEFENSIVE_WALL'
};

exports.Race = exports.$Enums.Race = {
  HUMAN: 'HUMAN',
  SYLVAN: 'SYLVAN',
  GRYLL: 'GRYLL',
  LUMINA: 'LUMINA',
  UMBRA: 'UMBRA'
};

exports.PlayerRole = exports.$Enums.PlayerRole = {
  PASSER: 'PASSER',
  RUNNER: 'RUNNER',
  BLOCKER: 'BLOCKER'
};

exports.InjuryStatus = exports.$Enums.InjuryStatus = {
  HEALTHY: 'HEALTHY',
  MINOR_INJURY: 'MINOR_INJURY',
  MODERATE_INJURY: 'MODERATE_INJURY',
  SEVERE_INJURY: 'SEVERE_INJURY'
};

exports.SkillType = exports.$Enums.SkillType = {
  PASSIVE: 'PASSIVE',
  ACTIVE: 'ACTIVE'
};

exports.SkillCategory = exports.$Enums.SkillCategory = {
  UNIVERSAL: 'UNIVERSAL',
  ROLE: 'ROLE',
  RACE: 'RACE'
};

exports.StaffType = exports.$Enums.StaffType = {
  HEAD_COACH: 'HEAD_COACH',
  PASSER_TRAINER: 'PASSER_TRAINER',
  RUNNER_TRAINER: 'RUNNER_TRAINER',
  BLOCKER_TRAINER: 'BLOCKER_TRAINER',
  RECOVERY_SPECIALIST: 'RECOVERY_SPECIALIST',
  SCOUT: 'SCOUT'
};

exports.ItemType = exports.$Enums.ItemType = {
  EQUIPMENT: 'EQUIPMENT',
  CONSUMABLE_RECOVERY: 'CONSUMABLE_RECOVERY',
  CONSUMABLE_BOOSTER: 'CONSUMABLE_BOOSTER',
  TROPHY: 'TROPHY',
  GAME_ENTRY: 'GAME_ENTRY',
  COSMETIC: 'COSMETIC'
};

exports.EquipmentSlot = exports.$Enums.EquipmentSlot = {
  HELMET: 'HELMET',
  FOOTWEAR: 'FOOTWEAR',
  GLOVES: 'GLOVES',
  ARMOR: 'ARMOR'
};

exports.ItemRarity = exports.$Enums.ItemRarity = {
  COMMON: 'COMMON',
  UNCOMMON: 'UNCOMMON',
  RARE: 'RARE',
  EPIC: 'EPIC',
  LEGENDARY: 'LEGENDARY',
  UNIQUE: 'UNIQUE'
};

exports.MatchType = exports.$Enums.MatchType = {
  LEAGUE: 'LEAGUE',
  TOURNAMENT_DAILY: 'TOURNAMENT_DAILY',
  TOURNAMENT_MIDSEASON: 'TOURNAMENT_MIDSEASON',
  EXHIBITION: 'EXHIBITION',
  PLAYOFF: 'PLAYOFF'
};

exports.MarketplaceStatus = exports.$Enums.MarketplaceStatus = {
  ACTIVE: 'ACTIVE',
  SOLD: 'SOLD',
  EXPIRED: 'EXPIRED',
  CANCELLED: 'CANCELLED',
  BUY_NOW_ONLY: 'BUY_NOW_ONLY'
};

exports.ListingActionType = exports.$Enums.ListingActionType = {
  LISTING_CREATED: 'LISTING_CREATED',
  BID_PLACED: 'BID_PLACED',
  BID_OUTBID: 'BID_OUTBID',
  AUCTION_EXTENDED: 'AUCTION_EXTENDED',
  BUY_NOW_PURCHASE: 'BUY_NOW_PURCHASE',
  AUCTION_WON: 'AUCTION_WON',
  AUCTION_EXPIRED: 'AUCTION_EXPIRED',
  LISTING_CANCELLED: 'LISTING_CANCELLED',
  OFF_SEASON_CONVERTED: 'OFF_SEASON_CONVERTED',
  AUTO_DELISTED: 'AUTO_DELISTED'
};

exports.GameStatus = exports.$Enums.GameStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  POSTPONED: 'POSTPONED',
  CANCELLED: 'CANCELLED'
};

exports.SeasonPhase = exports.$Enums.SeasonPhase = {
  REGULAR_SEASON: 'REGULAR_SEASON',
  PLAYOFFS: 'PLAYOFFS',
  OFF_SEASON: 'OFF_SEASON',
  PRE_SEASON: 'PRE_SEASON'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  CONTRACT_ALERT: 'CONTRACT_ALERT',
  INJURY_UPDATE: 'INJURY_UPDATE',
  MARKETPLACE_BID: 'MARKETPLACE_BID',
  MARKETPLACE_SOLD: 'MARKETPLACE_SOLD',
  MARKETPLACE_EXPIRED: 'MARKETPLACE_EXPIRED',
  SCOUTING_REPORT: 'SCOUTING_REPORT',
  MATCH_RESULT: 'MATCH_RESULT',
  TOURNAMENT_UPDATE: 'TOURNAMENT_UPDATE',
  RECRUIT_SIGNED: 'RECRUIT_SIGNED',
  SYSTEM_MESSAGE: 'SYSTEM_MESSAGE',
  TRADE_OFFER: 'TRADE_OFFER',
  TRADE_ACCEPTED: 'TRADE_ACCEPTED',
  TRADE_REJECTED: 'TRADE_REJECTED',
  LEAGUE_PROMOTION: 'LEAGUE_PROMOTION',
  LEAGUE_DEMOTION: 'LEAGUE_DEMOTION',
  NEW_SEASON: 'NEW_SEASON',
  PLAYER_RETIRED: 'PLAYER_RETIRED',
  PLAYER_PROGRESSED: 'PLAYER_PROGRESSED'
};

exports.RewardType = exports.$Enums.RewardType = {
  GEMS: 'GEMS',
  CREDITS: 'CREDITS',
  ITEM: 'ITEM',
  PREMIUM_BOX: 'PREMIUM_BOX'
};

exports.TournamentType = exports.$Enums.TournamentType = {
  DAILY_DIVISIONAL: 'DAILY_DIVISIONAL',
  MID_SEASON_CLASSIC: 'MID_SEASON_CLASSIC',
  SPECIAL_EVENT: 'SPECIAL_EVENT'
};

exports.TournamentStatus = exports.$Enums.TournamentStatus = {
  REGISTRATION_OPEN: 'REGISTRATION_OPEN',
  REGISTRATION_CLOSED: 'REGISTRATION_CLOSED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.Prisma.ModelName = {
  UserProfile: 'UserProfile',
  Session: 'Session',
  Team: 'Team',
  Player: 'Player',
  PlayerEquipment: 'PlayerEquipment',
  Contract: 'Contract',
  Skill: 'Skill',
  PlayerSkillLink: 'PlayerSkillLink',
  Staff: 'Staff',
  TeamFinances: 'TeamFinances',
  Stadium: 'Stadium',
  Item: 'Item',
  InventoryItem: 'InventoryItem',
  ActiveBoost: 'ActiveBoost',
  MarketplaceListing: 'MarketplaceListing',
  Bid: 'Bid',
  ListingHistory: 'ListingHistory',
  PlayerMarketValue: 'PlayerMarketValue',
  Strategy: 'Strategy',
  League: 'League',
  LeagueStanding: 'LeagueStanding',
  Game: 'Game',
  Season: 'Season',
  Notification: 'Notification',
  TryoutPack: 'TryoutPack',
  TryoutHistory: 'TryoutHistory',
  GemPack: 'GemPack',
  CreditExchangeRate: 'CreditExchangeRate',
  Referral: 'Referral',
  RedeemCode: 'RedeemCode',
  RedeemCodeRecord: 'RedeemCodeRecord',
  AdRewardMilestone: 'AdRewardMilestone',
  PremiumBoxReward: 'PremiumBoxReward',
  EquipmentReward: 'EquipmentReward',
  Tournament: 'Tournament',
  TournamentEntry: 'TournamentEntry',
  PaymentTransaction: 'PaymentTransaction'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
