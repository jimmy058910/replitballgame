generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = []
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  engineType      = "library"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model UserProfile {
  id                Int                @id @default(autoincrement())
  userId            String             @unique
  email             String?            @unique
  firstName         String?
  lastName          String?
  profileImageUrl   String?
  bio               String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  referralCode      String?            @unique
  referredBy        String?
  ndaAccepted       Boolean            @default(false)
  ndaAcceptedAt     DateTime?
  ndaVersion        String?            @default("1.0")
  role              Role               @default(USER)
  stripeCustomerId  String?            @unique
  Team              Team?
  redeemedCodes     RedeemCodeRecord[]
  adRewardMilestone AdRewardMilestone?

  @@index([userId])
  @@index([email])
  @@index([createdAt])
}

model Session {
  sid    String   @id @unique
  sess   Json
  expire DateTime

  @@index([expire])
}

model Team {
  id                   Int                  @id @default(autoincrement())
  userProfileId        Int                  @unique
  name                 String               @unique
  logoUrl              String?
  isAI                 Boolean              @default(false)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  camaraderie          Float                @default(75.0)
  fanLoyalty           Float                @default(50.0)
  homeField            FieldSize            @default(STANDARD)
  tacticalFocus        TacticalFocus        @default(BALANCED)
  leagueId             Int?
  division             Int?                 @default(8)
  subdivision          String?              @default("main")
  wins                 Int                  @default(0)
  losses               Int                  @default(0)
  points               Int                  @default(0)
  draws                Int                  @default(0)
  user                 UserProfile          @relation(fields: [userProfileId], references: [id])
  players              Player[]
  staff                Staff[]
  finances             TeamFinances?
  stadium              Stadium?
  inventoryItems       InventoryItem[]
  league               League?              @relation(fields: [leagueId], references: [id])
  activeBoosts         ActiveBoost[]
  strategy             Strategy?
  marketplaceListings  MarketplaceListing[] @relation("TeamListings")
  bids                 Bid[]                @relation("TeamBids")
  highBidderOnListings MarketplaceListing[] @relation("HighBidderListings")
  listingHistory       ListingHistory[]     @relation("ListingHistoryTeam")
  notifications        Notification[]
  tournamentEntries    TournamentEntry[]
  tryoutHistory        TryoutHistory[]
  homeTeamGames        Game[]               @relation("HomeTeamGames")
  awayTeamGames        Game[]               @relation("AwayTeamGames")
  teamMatchStats       TeamMatchStats[]

  @@index([userProfileId])
  @@index([leagueId])
  @@index([division, subdivision])
  @@index([wins, losses, draws, points])
  @@index([createdAt])
  @@index([userProfileId, division])
}

model Player {
  id                          Int                        @id @default(autoincrement())
  teamId                      Int
  firstName                   String
  lastName                    String
  race                        Race
  age                         Int
  role                        PlayerRole
  speed                       Int
  power                       Int
  throwing                    Int
  catching                    Int
  kicking                     Int
  staminaAttribute            Int
  leadership                  Int
  agility                     Int
  potentialRating             Float
  dailyStaminaLevel           Int                        @default(100)
  injuryStatus                InjuryStatus               @default(HEALTHY)
  injuryRecoveryPointsNeeded  Int                        @default(0)
  injuryRecoveryPointsCurrent Int                        @default(0)
  dailyItemsUsed              Int                        @default(0)
  careerInjuries              Int                        @default(0)
  gamesPlayedLastSeason       Int                        @default(0)
  seasonMinutesLeague         Float                      @default(0)
  seasonMinutesTournament     Float                      @default(0)
  seasonMinutesExhibition     Float                      @default(0)
  seasonMinutesTotal          Float                      @default(0)
  isOnMarket                  Boolean                    @default(false)
  isRetired                   Boolean                    @default(false)
  camaraderieScore            Float                      @default(75.0)
  createdAt                   DateTime                   @default(now())
  updatedAt                   DateTime                   @updatedAt
  team                        Team                       @relation(fields: [teamId], references: [id])
  contract                    Contract?
  skills                      PlayerSkillLink[]
  MarketplaceListing          MarketplaceListing?
  marketValue                 PlayerMarketValue?
  tryoutHistory               TryoutHistory[]
  activeBoosts                ActiveBoost[]
  currentEquipment            PlayerEquipment[]
  developmentHistory          PlayerDevelopmentHistory[]
  matchStats                  PlayerMatchStats[]
  careerMilestones            PlayerCareerMilestone[]

  @@index([teamId])
  @@index([race])
  @@index([role])
  @@index([age])
  @@index([isOnMarket])
  @@index([isRetired])
  @@index([injuryStatus])
  @@index([potentialRating])
  @@index([createdAt])
  @@index([teamId, role])
  @@index([teamId, injuryStatus])
}

model PlayerEquipment {
  id         Int      @id @default(autoincrement())
  playerId   Int
  itemId     Int
  equippedAt DateTime @default(now())
  player     Player   @relation(fields: [playerId], references: [id])
  item       Item     @relation(fields: [itemId], references: [id])

  @@unique([playerId, itemId])
}

model Contract {
  id           Int      @id @default(autoincrement())
  playerId     Int?     @unique
  staffId      Int?     @unique
  salary       Int
  length       Int
  signingBonus Int      @default(0)
  startDate    DateTime @default(now())
  player       Player?  @relation(fields: [playerId], references: [id])
  staff        Staff?   @relation(fields: [staffId], references: [id])

  @@index([playerId])
  @@index([staffId])
}

model Skill {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String
  type        SkillType
  category    SkillCategory
  tiers       Json
  playerLinks PlayerSkillLink[]
}

model PlayerSkillLink {
  id          Int      @id @default(autoincrement())
  playerId    Int
  skillId     Int
  currentTier Int      @default(1)
  acquiredAt  DateTime @default(now())
  player      Player   @relation(fields: [playerId], references: [id])
  skill       Skill    @relation(fields: [skillId], references: [id])

  @@unique([playerId, skillId])
}

model Staff {
  id                   Int       @id @default(autoincrement())
  teamId               Int
  type                 StaffType
  name                 String
  level                Int       @default(1)
  motivation           Int       @default(5)
  development          Int       @default(5)
  teaching             Int       @default(5)
  physiology           Int       @default(5)
  talentIdentification Int       @default(5)
  potentialAssessment  Int       @default(5)
  tactics              Int       @default(5)
  age                  Int       @default(30)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  team                 Team      @relation(fields: [teamId], references: [id])
  contract             Contract?

  @@index([teamId])
  @@index([type])
  @@index([teamId, type])
}

model TeamFinances {
  id                        Int      @id @default(autoincrement())
  teamId                    Int      @unique
  credits                   BigInt   @default(50000)
  gems                      Int      @default(0)
  escrowCredits             BigInt   @default(0)
  escrowGems                Int      @default(0)
  projectedIncome           BigInt   @default(0)
  projectedExpenses         BigInt   @default(0)
  lastSeasonRevenue         BigInt   @default(0)
  lastSeasonExpenses        BigInt   @default(0)
  facilitiesMaintenanceCost BigInt   @default(0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  team                      Team     @relation(fields: [teamId], references: [id])
}

model Stadium {
  id                   Int      @id @default(autoincrement())
  teamId               Int      @unique
  capacity             Int      @default(5000)
  concessionsLevel     Int      @default(1)
  parkingLevel         Int      @default(1)
  vipSuitesLevel       Int      @default(1)
  merchandisingLevel   Int      @default(1)
  lightingScreensLevel Int      @default(1)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  team                 Team     @relation(fields: [teamId], references: [id])
}

model Item {
  id                Int               @id @default(autoincrement())
  name              String            @unique
  description       String
  type              ItemType
  slot              EquipmentSlot?
  raceRestriction   Race?
  statEffects       Json?
  rarity            ItemRarity        @default(COMMON)
  creditPrice       BigInt?
  gemPrice          Int?
  effectValue       Json?
  inventoryItems    InventoryItem[]
  activeBoosts      ActiveBoost[]
  PlayerEquipment   PlayerEquipment[]
  PremiumBoxRewards EquipmentReward[]
}

model InventoryItem {
  id         Int      @id @default(autoincrement())
  teamId     Int
  itemId     Int
  quantity   Int
  acquiredAt DateTime @default(now())
  team       Team     @relation(fields: [teamId], references: [id])
  item       Item     @relation(fields: [itemId], references: [id])

  @@unique([teamId, itemId])
  @@index([teamId])
  @@index([itemId])
}

model ActiveBoost {
  id        Int       @id @default(autoincrement())
  teamId    Int
  playerId  Int?
  itemId    Int
  matchType MatchType
  isActive  Boolean   @default(true)
  appliedAt DateTime  @default(now())
  team      Team      @relation(fields: [teamId], references: [id])
  player    Player?   @relation(fields: [playerId], references: [id])
  item      Item      @relation(fields: [itemId], references: [id])

  @@index([teamId])
  @@index([playerId])
  @@index([matchType])
  @@index([isActive])
  @@index([teamId, isActive])
  @@index([playerId, isActive])
}

model MarketplaceListing {
  id                      Int               @id @default(autoincrement())
  playerId                Int               @unique
  sellerTeamId            Int
  startBid                BigInt
  buyNowPrice             BigInt?
  minBuyNowPrice          BigInt
  currentBid              BigInt?
  currentHighBidderTeamId Int?
  expiryTimestamp         DateTime
  originalExpiryTimestamp DateTime
  auctionExtensions       Int               @default(0)
  listingFee              BigInt
  marketTaxRate           Float             @default(5.0)
  escrowAmount            BigInt            @default(0)
  listingStatus           MarketplaceStatus @default(ACTIVE)
  isOffSeasonConverted    Boolean           @default(false)
  autoDelistAt            DateTime?
  isActive                Boolean           @default(true)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  player                  Player            @relation(fields: [playerId], references: [id])
  sellerTeam              Team              @relation("TeamListings", fields: [sellerTeamId], references: [id])
  currentHighBidderTeam   Team?             @relation("HighBidderListings", fields: [currentHighBidderTeamId], references: [id])
  bids                    Bid[]
  history                 ListingHistory[]

  @@index([sellerTeamId])
  @@index([isActive, expiryTimestamp])
  @@index([listingStatus])
  @@index([isOffSeasonConverted])
  @@index([autoDelistAt])
  @@index([listingStatus, createdAt])
  @@index([sellerTeamId, listingStatus])
  @@index([playerId, listingStatus])
}

model Bid {
  id           Int                @id @default(autoincrement())
  listingId    Int
  bidderTeamId Int
  bidAmount    BigInt
  escrowAmount BigInt             @default(0)
  isWinningBid Boolean            @default(false)
  isRefunded   Boolean            @default(false)
  placedAt     DateTime           @default(now())
  listing      MarketplaceListing @relation(fields: [listingId], references: [id])
  bidderTeam   Team               @relation("TeamBids", fields: [bidderTeamId], references: [id])

  @@index([listingId])
  @@index([bidderTeamId])
  @@index([isWinningBid])
  @@index([isRefunded])
}

model ListingHistory {
  id          Int                @id @default(autoincrement())
  listingId   Int
  actionType  ListingActionType
  teamId      Int?
  amount      BigInt?
  oldValue    BigInt?
  newValue    BigInt?
  description String?
  timestamp   DateTime           @default(now())
  listing     MarketplaceListing @relation(fields: [listingId], references: [id])
  team        Team?              @relation("ListingHistoryTeam", fields: [teamId], references: [id])

  @@index([listingId])
  @@index([teamId])
  @@index([actionType])
  @@index([timestamp])
}

model PlayerMarketValue {
  id          Int      @id @default(autoincrement())
  playerId    Int      @unique
  carRating   Float
  potential   Float
  minBuyNow   BigInt
  marketValue BigInt
  lastUpdated DateTime @updatedAt
  createdAt   DateTime @default(now())
  player      Player   @relation(fields: [playerId], references: [id])

  @@index([playerId])
  @@index([lastUpdated])
}

model Strategy {
  id               Int      @id @default(autoincrement())
  teamId           Int      @unique
  formationJson    Json?
  substitutionJson Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  team             Team     @relation(fields: [teamId], references: [id])
}

model League {
  id        Int              @id @default(autoincrement())
  division  Int
  name      String
  seasonId  String
  teams     Team[]
  schedule  Game[]
  standings LeagueStanding[]
  season    Season           @relation(fields: [seasonId], references: [id])

  @@unique([name, seasonId])
  @@index([division])
  @@index([seasonId])
  @@index([division, seasonId])
}

model LeagueStanding {
  id                Int      @id @default(autoincrement())
  leagueId          Int
  teamId            Int
  teamName          String
  wins              Int      @default(0)
  losses            Int      @default(0)
  ties              Int      @default(0)
  pointsFor         Int      @default(0)
  pointsAgainst     Int      @default(0)
  pointDifferential Int      @default(0)
  streak            String   @default("N/A")
  rank              Int      @default(0)
  updatedAt         DateTime @updatedAt
  league            League   @relation(fields: [leagueId], references: [id])

  @@unique([leagueId, teamId])
  @@index([leagueId])
  @@index([teamId])
  @@index([wins, losses])
  @@index([rank])
}

model Game {
  id            Int                @id @default(autoincrement())
  leagueId      Int?
  homeTeamId    Int
  awayTeamId    Int
  homeScore     Int?
  awayScore     Int?
  gameDate      DateTime
  simulated     Boolean            @default(false)
  simulationLog Json?
  matchType     MatchType          @default(LEAGUE)
  tournamentId  Int?
  round         Int?
  status        GameStatus         @default(SCHEDULED)
  createdAt     DateTime           @default(now())
  seasonId      String?
  scheduleId    String?
  subdivision   String?
  gameDay       Int?
  league        League?            @relation(fields: [leagueId], references: [id])
  homeTeam      Team               @relation("HomeTeamGames", fields: [homeTeamId], references: [id])
  awayTeam      Team               @relation("AwayTeamGames", fields: [awayTeamId], references: [id])
  tournament    Tournament?        @relation(fields: [tournamentId], references: [id])
  season        Season?            @relation(fields: [seasonId], references: [id])
  schedule      Schedule?          @relation(fields: [scheduleId], references: [id])
  playerStats   PlayerMatchStats[]
  teamStats     TeamMatchStats[]

  @@index([homeTeamId])
  @@index([awayTeamId])
  @@index([gameDate])
  @@index([status])
  @@index([matchType])
  @@index([leagueId])
  @@index([tournamentId])
  @@index([status, gameDate])
  @@index([matchType, gameDate])
  @@index([seasonId, subdivision])
  @@index([seasonId, gameDay])
  @@index([scheduleId])
  @@index([matchType, scheduleId, status])
  @@index([scheduleId, status])
  @@index([homeTeamId, scheduleId])
  @@index([awayTeamId, scheduleId])
}

model Season {
  id            String          @id @unique
  seasonNumber  Int             @unique
  startDate     DateTime
  endDate       DateTime
  currentDay    Int             @default(1)
  phase         SeasonPhase     @default(REGULAR_SEASON)
  createdAt     DateTime        @default(now())
  leagues       League[]
  games         Game[]
  schedules     Schedule[]
  tryoutHistory TryoutHistory[]

  @@index([seasonNumber])
  @@index([currentDay])
  @@index([phase])
  @@index([startDate, endDate])
}

model Schedule {
  id          String   @id @default(uuid())
  seasonId    String
  division    Int
  subdivision String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  season      Season   @relation(fields: [seasonId], references: [id])
  games       Game[]

  @@unique([seasonId, division, subdivision])
  @@index([seasonId])
  @@index([division, subdivision])
  @@index([isActive])
}

model Notification {
  id        Int              @id @default(autoincrement())
  teamId    Int
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  linkTo    String?
  createdAt DateTime         @default(now())
  team      Team             @relation(fields: [teamId], references: [id])

  @@index([teamId, isRead])
}

model TryoutPack {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  creditCost  BigInt
  gemCost     Int?
  numPlayers  Int
  qualityTier String
}

model TryoutHistory {
  id           Int      @id @default(autoincrement())
  teamId       Int
  seasonId     String
  tryoutType   String
  cost         Int
  playersAdded Int
  conductedAt  DateTime @default(now())
  playerId     Int?
  team         Team     @relation(fields: [teamId], references: [id])
  season       Season   @relation(fields: [seasonId], references: [id])
  player       Player?  @relation(fields: [playerId], references: [id])

  @@unique([teamId, seasonId])
}

model GemPack {
  id        Int    @id @default(autoincrement())
  name      String @unique
  gemAmount Int
  usdPrice  Float
  productId String @unique
}

model CreditExchangeRate {
  id              Int    @id @default(autoincrement())
  gems            Int    @unique
  credits         BigInt
  bonusPercentage Float  @default(0)
}

model Referral {
  id             Int      @id @default(autoincrement())
  referrerUserId String
  referredUserId String
  rewardGiven    Boolean  @default(false)
  createdAt      DateTime @default(now())

  @@unique([referrerUserId, referredUserId])
}

model RedeemCode {
  id          String             @id @unique
  description String
  rewardType  RewardType
  rewardValue Json
  maxUses     Int?
  currentUses Int                @default(0)
  isActive    Boolean            @default(true)
  expiryDate  DateTime?
  createdAt   DateTime           @default(now())
  redeemedBy  RedeemCodeRecord[]
}

model RedeemCodeRecord {
  id            Int         @id @default(autoincrement())
  redeemCodeId  String
  userProfileId Int
  redeemedAt    DateTime    @default(now())
  redeemCode    RedeemCode  @relation(fields: [redeemCodeId], references: [id])
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id])

  @@unique([redeemCodeId, userProfileId])
}

model AdRewardMilestone {
  id              Int         @id @default(autoincrement())
  userProfileId   Int         @unique
  totalAdsWatched Int         @default(0)
  adsWatchedToday Int         @default(0)
  lastAdWatchedAt DateTime?
  userProfile     UserProfile @relation(fields: [userProfileId], references: [id])
}

model PremiumBoxReward {
  id          Int        @id @default(autoincrement())
  category    String
  rewardType  RewardType
  rewardValue Json
  weight      Float
}

model EquipmentReward {
  id     Int        @id @default(autoincrement())
  boxId  Int
  itemId Int
  rarity ItemRarity
  weight Float
  item   Item       @relation(fields: [itemId], references: [id])
}

model Tournament {
  id                  Int               @id @default(autoincrement())
  name                String
  tournamentId        String?
  type                TournamentType
  division            Int?
  status              TournamentStatus  @default(REGISTRATION_OPEN)
  startTime           DateTime
  registrationEndTime DateTime?
  endTime             DateTime?
  entryFeeCredits     BigInt?
  entryFeeGems        Int?
  entryFeeItemId      Int?
  prizePoolJson       Json
  seasonDay           Int?
  createdAt           DateTime          @default(now())
  games               Game[]
  entries             TournamentEntry[]

  @@index([type])
  @@index([status])
  @@index([startTime])
  @@index([division])
  @@index([seasonDay])
  @@index([type, status])
  @@index([division, status])
  @@index([status, startTime])
  @@index([type, status, startTime])
}

model TournamentEntry {
  id             Int        @id @default(autoincrement())
  tournamentId   Int
  teamId         Int
  registeredAt   DateTime   @default(now())
  finalRank      Int?
  rewardsClaimed Boolean    @default(false)
  tournament     Tournament @relation(fields: [tournamentId], references: [id])
  team           Team       @relation(fields: [teamId], references: [id])

  @@unique([tournamentId, teamId])
  @@index([tournamentId])
  @@index([teamId])
  @@index([finalRank])
  @@index([rewardsClaimed])
}

model PaymentTransaction {
  id              Int      @id @default(autoincrement())
  userId          String
  teamId          Int
  transactionType String
  itemName        String
  itemType        String
  creditsAmount   BigInt   @default(0)
  gemsAmount      Int      @default(0)
  status          String
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([teamId])
  @@index([transactionType])
  @@index([status])
}

model PlayerDevelopmentHistory {
  id                Int      @id @default(autoincrement())
  playerId          Int
  developmentDate   DateTime @default(now())
  developmentType   String
  statChanges       Json
  previousValues    Json
  newValues         Json
  triggerReason     String
  activityScore     Float    @default(0)
  gamesPlayedFactor Int      @default(0)
  potentialModifier Float    @default(0)
  ageModifier       Float    @default(0)
  coachingBonus     Float    @default(0)
  trainerBonus      Float    @default(0)
  player            Player   @relation(fields: [playerId], references: [id])

  @@index([playerId])
  @@index([developmentDate])
  @@index([developmentType])
}

model PlayerMatchStats {
  id                      Int       @id @default(autoincrement())
  playerId                Int
  gameId                  Int
  minutesPlayed           Float     @default(0)
  performanceRating       Float?
  camaraderieContribution Float     @default(0)
  scores                  Int       @default(0)
  assists                 Int       @default(0)
  passAttempts            Int       @default(0)
  passCompletions         Int       @default(0)
  passingYards            Int       @default(0)
  perfectPasses           Int       @default(0)
  rushingYards            Int       @default(0)
  breakawayRuns           Int       @default(0)
  catches                 Int       @default(0)
  receivingYards          Int       @default(0)
  drops                   Int       @default(0)
  tackles                 Int       @default(0)
  tackleAttempts          Int       @default(0)
  knockdowns              Int       @default(0)
  blocks                  Int       @default(0)
  injuriesInflicted       Int       @default(0)
  interceptions           Int       @default(0)
  ballStrips              Int       @default(0)
  passDeflections         Int       @default(0)
  fumblesLost             Int       @default(0)
  ballRetention           Int       @default(0)
  distanceCovered         Int       @default(0)
  staminaUsed             Int       @default(0)
  ballPossessionTime      Int       @default(0)
  pressureApplied         Int       @default(0)
  injuries                Int       @default(0)
  matchDate               DateTime
  matchType               MatchType
  player                  Player    @relation(fields: [playerId], references: [id])
  game                    Game      @relation(fields: [gameId], references: [id])

  @@unique([playerId, gameId])
  @@index([playerId])
  @@index([gameId])
  @@index([matchDate])
  @@index([matchType])
}

model TeamMatchStats {
  id                     Int       @id @default(autoincrement())
  teamId                 Int
  gameId                 Int
  timeOfPossession       Int       @default(0)
  possessionPercentage   Float     @default(0)
  averageFieldPosition   Float     @default(0)
  territoryGained        Int       @default(0)
  totalScore             Int       @default(0)
  totalPassingYards      Int       @default(0)
  totalRushingYards      Int       @default(0)
  totalOffensiveYards    Int       @default(0)
  passingAccuracy        Float     @default(0)
  ballRetentionRate      Float     @default(0)
  scoringOpportunities   Int       @default(0)
  scoringEfficiency      Float     @default(0)
  totalTackles           Int       @default(0)
  totalKnockdowns        Int       @default(0)
  totalBlocks            Int       @default(0)
  totalInjuriesInflicted Int       @default(0)
  totalInterceptions     Int       @default(0)
  totalBallStrips        Int       @default(0)
  passDeflections        Int       @default(0)
  defensiveStops         Int       @default(0)
  totalFumbles           Int       @default(0)
  turnoverDifferential   Int       @default(0)
  physicalDominance      Int       @default(0)
  ballSecurityRating     Float     @default(0)
  homeFieldAdvantage     Float     @default(0)
  crowdIntensity         Float     @default(0)
  domeReverberation      Float     @default(0)
  camaraderieTeamBonus   Float     @default(0)
  tacticalEffectiveness  Float     @default(0)
  equipmentAdvantage     Float     @default(0)
  physicalConditioning   Float     @default(0)
  matchDate              DateTime
  matchType              MatchType
  team                   Team      @relation(fields: [teamId], references: [id])
  game                   Game      @relation(fields: [gameId], references: [id])

  @@unique([teamId, gameId])
  @@index([teamId])
  @@index([gameId])
  @@index([matchDate])
  @@index([matchType])
}

model PlayerCareerMilestone {
  id            Int      @id @default(autoincrement())
  playerId      Int
  milestoneType String
  description   String
  achievedAt    DateTime @default(now())
  seasonId      String?
  metadata      Json?
  player        Player   @relation(fields: [playerId], references: [id])

  @@index([playerId])
  @@index([milestoneType])
  @@index([achievedAt])
}

enum FieldSize {
  STANDARD
  LARGE
  SMALL
}

enum TacticalFocus {
  BALANCED
  ALL_OUT_ATTACK
  DEFENSIVE_WALL
}

enum Race {
  HUMAN
  SYLVAN
  GRYLL
  LUMINA
  UMBRA
}

enum PlayerRole {
  PASSER
  RUNNER
  BLOCKER
}

enum Role {
  USER
  TEAM_OWNER
  ADMIN
  SUPER_ADMIN
}

enum InjuryStatus {
  HEALTHY
  MINOR_INJURY
  MODERATE_INJURY
  SEVERE_INJURY
}

enum SkillType {
  PASSIVE
  ACTIVE
}

enum SkillCategory {
  UNIVERSAL
  ROLE
  RACE
}

enum StaffType {
  HEAD_COACH
  PASSER_TRAINER
  RUNNER_TRAINER
  BLOCKER_TRAINER
  RECOVERY_SPECIALIST
  SCOUT
}

enum ItemType {
  EQUIPMENT
  CONSUMABLE_RECOVERY
  CONSUMABLE_BOOSTER
  TROPHY
  GAME_ENTRY
  COSMETIC
}

enum EquipmentSlot {
  HELMET
  FOOTWEAR
  GLOVES
  ARMOR
}

enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  EPIC
  LEGENDARY
  UNIQUE
}

enum MatchType {
  LEAGUE
  TOURNAMENT_DAILY
  TOURNAMENT_MIDSEASON
  EXHIBITION
  PLAYOFF
}

enum MarketplaceStatus {
  ACTIVE
  SOLD
  EXPIRED
  CANCELLED
  BUY_NOW_ONLY
}

enum ListingActionType {
  LISTING_CREATED
  BID_PLACED
  BID_OUTBID
  AUCTION_EXTENDED
  BUY_NOW_PURCHASE
  AUCTION_WON
  AUCTION_EXPIRED
  LISTING_CANCELLED
  OFF_SEASON_CONVERTED
  AUTO_DELISTED
}

enum GameStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  POSTPONED
  CANCELLED
}

enum SeasonPhase {
  REGULAR_SEASON
  PLAYOFFS
  OFF_SEASON
  PRE_SEASON
}

enum NotificationType {
  CONTRACT_ALERT
  INJURY_UPDATE
  MARKETPLACE_BID
  MARKETPLACE_SOLD
  MARKETPLACE_EXPIRED
  SCOUTING_REPORT
  MATCH_RESULT
  TOURNAMENT_UPDATE
  RECRUIT_SIGNED
  SYSTEM_MESSAGE
  TRADE_OFFER
  TRADE_ACCEPTED
  TRADE_REJECTED
  LEAGUE_PROMOTION
  LEAGUE_DEMOTION
  NEW_SEASON
  PLAYER_RETIRED
  PLAYER_PROGRESSED
}

enum RewardType {
  GEMS
  CREDITS
  ITEM
  PREMIUM_BOX
}

enum TournamentType {
  DAILY_DIVISIONAL
  MID_SEASON_CLASSIC
  SPECIAL_EVENT
}

enum TournamentStatus {
  REGISTRATION_OPEN
  REGISTRATION_CLOSED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
