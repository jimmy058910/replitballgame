# ---- Stage 1: Build ----
# This stage builds the React frontend and has all dev dependencies
FROM node:20-alpine AS builder

WORKDIR /app

# Install all dependencies to build the project
COPY package*.json ./
RUN npm install

# Copy all source code
COPY . .

# Build the React/Vite frontend. This creates the /app/dist folder.
RUN NODE_ENV=production npm run build

# Verify the build
RUN ls -la dist/ && echo "Build verification complete"

# ---- Stage 2: Production Runner ----
# This stage creates the final, slim image
FROM node:20-alpine

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init curl

WORKDIR /app

# Install production-only dependencies + tsx for running TS files
COPY package*.json ./
RUN npm ci --only=production && npm install tsx

# Copy built frontend from the 'builder' stage
COPY --from=builder /app/dist ./dist

# Copy server code from the 'builder' stage
COPY --from=builder /app/server ./server
COPY --from=builder /app/shared ./shared
COPY --from=builder /app/prisma ./prisma

# Create a non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Command to start the production server
CMD ["dumb-init", "npx", "tsx", "server/production-deployment.ts"]