# Production Dockerfile - optimized for Cloud Run
FROM node:20-alpine

# Install system dependencies
RUN apk update && apk upgrade && apk add --no-cache \
    dumb-init \
    ca-certificates

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install all dependencies (needed for build)
RUN npm install

# Copy source code
COPY . .

# Debug: List copied files and verify structure
RUN echo "=== BUILD ENVIRONMENT DEBUG ===" && \
    echo "Current directory: $(pwd)" && \
    echo "Files in root:" && ls -la && \
    echo "Files in client:" && ls -la client/ && \
    echo "Package.json scripts:" && grep -A 5 '"scripts"' package.json

# Verify Vite config exists and has @shared alias
RUN echo "=== VITE CONFIG VERIFICATION ===" && \
    cat vite.config.production.ts | grep -A 3 '@shared' || echo "❌ @shared alias missing"

# Build the React frontend with enhanced error handling
RUN echo "=== STARTING REACT BUILD ===" && \
    NODE_ENV=production npm run build 2>&1 | tee build.log && \
    echo "=== BUILD COMPLETED ==="

# Comprehensive build verification
RUN echo "=== BUILD VERIFICATION ===" && \
    echo "Files after build:" && ls -la && \
    echo "Contents of dist folder:" && \
    if [ -d "dist" ]; then \
        ls -la dist/ && \
        echo "Dist contents breakdown:" && \
        find dist/ -type f -name "*.html" -o -name "*.js" -o -name "*.css" | head -10; \
    else \
        echo "❌ No dist folder created"; \
    fi

# Critical: Verify index.html exists and fail if not
RUN if [ -f "dist/index.html" ]; then \
        echo "✅ React build successful - index.html found" && \
        echo "Index.html size: $(stat -c%s dist/index.html) bytes" && \
        echo "First 500 chars of index.html:" && \
        head -c 500 dist/index.html; \
    else \
        echo "❌ CRITICAL FAILURE: React build failed - no index.html" && \
        echo "Build log:" && cat build.log && \
        echo "Available files:" && find . -name "*.html" 2>/dev/null && \
        exit 1; \
    fi

# Clean up dev dependencies after build
RUN npm ci --only=production && \
    npm install tsx

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 && \
    chown -R nextjs:nodejs /app

USER nextjs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"

# Start production server
ENTRYPOINT ["dumb-init", "--"]
CMD ["npx", "tsx", "server/production-simple.ts"]