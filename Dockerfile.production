# PRODUCTION DEPLOYMENT - INDUSTRY STANDARD MULTI-STAGE BUILD
# Incorporating all lessons learned from 100+ deployment debugging iterations

# ===============================
# STAGE 1: BUILD DEPENDENCIES
# ===============================
FROM --platform=linux/amd64 node:20-slim AS dependencies

# Install system dependencies for native modules
RUN apt-get update && apt-get install -y \
    python3 \
    make \
    g++ \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy dependency files first (Docker layer caching)
COPY package*.json ./
COPY tsconfig*.json ./

# Install ALL dependencies (including devDependencies for build and tsx for runtime)
RUN npm ci --include=dev

# ===============================
# STAGE 2: BUILD APPLICATION
# ===============================
FROM dependencies AS builder

# Copy source code for compilation
COPY server/ ./server/
COPY shared/ ./shared/
COPY client/ ./client/
COPY public/ ./public/
COPY types/ ./types/
COPY prisma/ ./prisma/

# Copy build configurations
COPY vite.config.ts ./
COPY vite.config.production.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY components.json ./

# Generate Prisma client FIRST (critical for TypeScript compilation)
RUN npx prisma generate
RUN echo "‚úÖ Prisma client generated at: $(find . -name 'index.js' -path '*/prisma/*' | head -1)"

# CRITICAL FIX: tsx doesn't support --build flag, use proper runtime approach
# Copy TypeScript source files to dist for tsx runtime transpilation
RUN mkdir -p dist/server
RUN echo "üîß Using tsx runtime transpilation (tsx --build is not supported)"
RUN cp -r server/* dist/server/
RUN echo "‚úÖ TypeScript source files copied for tsx runtime transpilation"

# Build optimized React frontend
RUN npm run build
RUN echo "‚úÖ Frontend built to dist/public/"

# Copy shared resources to dist
RUN cp -r shared dist/ && cp -r prisma dist/
RUN echo "‚úÖ Shared resources copied to dist/"

# Ensure Prisma client is available in expected production paths
RUN mkdir -p dist/generated && cp -r node_modules/.prisma dist/generated/prisma
RUN echo "‚úÖ Prisma client copied to production location"

# Verify server entry point exists for tsx runtime transpilation
RUN test -f dist/server/index.ts && echo "‚úÖ Server entry point exists (TypeScript for tsx)" || (echo "‚ùå Server TypeScript file missing" && exit 1)
RUN test -d dist/public && echo "‚úÖ Frontend build exists" || (echo "‚ùå Frontend build failed" && exit 1)
RUN test -f node_modules/.prisma/client/index.js && echo "‚úÖ Prisma client exists" || (echo "‚ùå Prisma client missing" && exit 1)

# ===============================
# STAGE 3: PRODUCTION RUNTIME
# ===============================
FROM --platform=linux/amd64 node:20-slim AS production

# Install only production runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Set production environment
ENV NODE_ENV=production
ENV HOST=0.0.0.0
# PORT will be set by Cloud Run - don't override it

WORKDIR /app

# Copy all built artifacts and dependencies from the builder stage
COPY --from=builder /app .

# Prune development dependencies to reduce image size
RUN npm prune --production

# Create non-root user for security
RUN groupadd -g 1001 nodejs && \
    useradd -r -u 1001 -g nodejs nodejs

# Copy and make executable the Cloud Run optimized start script (as root)
COPY --chmod=755 start-cloudrun.sh ./

# Set ownership and permissions
RUN chown -R nodejs:nodejs /app
USER nodejs

# Expose Cloud Run port
EXPOSE 8080

# Health check for container monitoring
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Run the Cloud Run optimized server directly
CMD ["./start-cloudrun.sh"]