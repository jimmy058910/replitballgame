# INDUSTRY STANDARD: Express + Database Dockerfile
# Multi-stage build for optimal production image

# ===== BUILDER STAGE =====
FROM node:20.19.4-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache python3 make g++

# Copy dependency files first (Docker layer caching optimization)
COPY package.json package-lock.json ./

# Install ALL dependencies including devDependencies for build
RUN npm ci --include=dev

# FORCE CACHE INVALIDATION: Copy source code with corrected Cloud SQL configuration
COPY server-express-database.js ./

# Copy Prisma schema for client generation
COPY prisma ./prisma/

# Generate Prisma Client for production
RUN npx prisma generate

# ===== PRODUCTION STAGE =====
FROM node:20.19.4-alpine AS production

# Install production runtime dependencies
RUN apk add --no-cache curl wget

WORKDIR /app

# Copy package files
COPY package.json package-lock.json ./

# Install ONLY production dependencies
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder
COPY --from=builder /app/server-express-database.js ./

# Copy generated Prisma Client
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/prisma ./prisma/

# Create non-root user with specific UID/GID for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001 -G nodejs

# Set proper ownership and permissions
RUN chown -R nodejs:nodejs /app && \
    chmod -R 755 /app

# Switch to non-root user
USER nodejs

# Expose port (documentation only, Cloud Run uses PORT env var)
EXPOSE 8080

# Environment variables for production
ENV NODE_ENV=production
ENV HOST=0.0.0.0
ENV PORT=8080

# Health check with proper timeout and retries for Cloud Run
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

# Use exec form for proper signal handling
CMD ["node", "server-express-database.js"]