# Industry Standard Node.js Production Dockerfile
# Multi-stage build following Google Cloud Run best practices

# Build stage
FROM node:20-alpine AS builder

# Install dumb-init for signal handling
RUN apk add --no-cache dumb-init

WORKDIR /app

# Copy package files for dependency caching
COPY package*.json ./
COPY tsconfig*.json ./

# Install all dependencies (including dev for build)
RUN npm ci

# Copy source code
COPY . .

# Generate Prisma client
RUN npx prisma generate

# Build frontend
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Set production environment
ENV NODE_ENV=production
ENV PORT=8080

# Copy dumb-init from builder
COPY --from=builder /usr/bin/dumb-init /usr/bin/dumb-init

# Create non-root user
RUN addgroup -g 1001 -S backend && adduser -S backend -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install production dependencies only
RUN npm ci --omit=dev && npm cache clean --force

# Copy built application from builder
COPY --from=builder --chown=backend:backend /app/generated ./generated
COPY --from=builder --chown=backend:backend /app/dist ./dist
COPY --chown=backend:backend server/ ./server/
COPY --chown=backend:backend shared/ ./shared/
COPY --chown=backend:backend prisma/ ./prisma/

# Switch to non-root user
USER backend

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:8080/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Start server with proper signal handling
CMD ["dumb-init", "npx", "tsx", "server/index.ts"]